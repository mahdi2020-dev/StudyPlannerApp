#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Persian Financial, Health, and Time Management Application
Main entry point for the application
"""

import os
import sys
import logging
from pathlib import Path
import socket
import json
import http.server
import socketserver
import urllib.parse
import base64
from datetime import datetime, timedelta

# Check if running in Replit environment
IN_REPLIT = os.environ.get('REPL_ID') is not None

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def run_desktop_app():
    """Run the standard PyQt desktop application"""
    # Import Qt dependencies only when needed
    from PyQt6.QtWidgets import QApplication
    from PyQt6.QtCore import QCoreApplication, Qt
    from PyQt6.QtGui import QFontDatabase, QIcon
    
    from app.ui.login_window import LoginWindow
    from app.core.database import DatabaseManager
    import app.ui.style as style
    
    # Create the application
    app = QApplication(sys.argv)
    
    # Set application details
    QCoreApplication.setOrganizationName("PersianLifeManager")
    QCoreApplication.setApplicationName("Persian Life Manager")
    QCoreApplication.setApplicationVersion("1.0.0")
    
    # Make sure application works with RTL languages
    QApplication.setLayoutDirection(Qt.LayoutDirection.RightToLeft)
    
    # Apply application stylesheet
    app.setStyleSheet(style.STYLESHEET)
    
    # Initialize the database
    db_path = os.path.join(Path.home(), '.persian_life_manager', 'database.db')
    os.makedirs(os.path.dirname(db_path), exist_ok=True)
    db_manager = DatabaseManager(db_path)
    db_manager.initialize_database()
    
    # Show the login window
    login_window = LoginWindow()
    login_window.show()
    
    # Run application event loop
    sys.exit(app.exec())


def run_replit_web_preview():
    """Run a web interface for Persian Life Manager in Replit"""
    import http.server
    import json
    import urllib.parse
    import socketserver
    from app.core.database import DatabaseManager
    from app.core.auth import AuthService
    from app.services.finance_service import FinanceService
    from app.services.health_service import HealthService
    from app.services.calendar_service import CalendarService
    from app.services.ai_service import AIService
    
    # Initialize services
    db_path = os.path.join(Path.home(), '.persian_life_manager', 'database.db')
    os.makedirs(os.path.dirname(db_path), exist_ok=True)
    db_manager = DatabaseManager(db_path)
    db_manager.initialize_database()
    
    auth_service = AuthService(db_path)
    ai_service = AIService()
    
    # Add OpenAI API key check
    OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
    if not OPENAI_API_KEY:
        logger.warning("OPENAI_API_KEY environment variable not set. AI features will be limited.")
    
    # Import AI chat service
    try:
        from app.services.ai_chat_service import AIChatService
        ai_chat_service = AIChatService()
        logger.info("AI Chat Service initialized successfully")
    except Exception as e:
        logger.error(f"Failed to initialize AI Chat Service: {str(e)}")
        ai_chat_service = None
        
    # Import speech to text service
    try:
        from app.services.speech_to_text import SpeechToTextService
        speech_service = SpeechToTextService()
        logger.info("Speech-to-Text Service initialized successfully")
    except Exception as e:
        logger.error(f"Failed to initialize Speech-to-Text Service: {str(e)}")
        speech_service = None
    
    # Current user info (for session management)
    current_user = {"user_id": None, "username": None}
    
    # Create a web server for the Persian Life Manager
    class PersianLifeManagerHandler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            # Parse URL
            parsed_url = urllib.parse.urlparse(self.path)
            path = parsed_url.path
            
            # Routes
            if path == '/':
                self.send_home_page()
            elif path == '/login':
                self.send_login_page()
            elif path == '/dashboard' and current_user["user_id"]:
                self.send_dashboard_page()
            elif path == '/finance' and current_user["user_id"]:
                self.send_finance_page()
            elif path == '/health' and current_user["user_id"]:
                self.send_health_page()
            elif path == '/calendar' and current_user["user_id"]:
                self.send_calendar_page()
            elif path == '/ai-chat' and current_user["user_id"]:
                self.send_ai_chat_page()
            elif path == '/logout':
                current_user["user_id"] = None
                current_user["username"] = None
                self.send_redirect('/login')
            elif path.startswith('/api/') and current_user["user_id"]:
                # API endpoints
                if path == '/api/chat':
                    self.handle_api_chat()
                elif path == '/api/suggest-activity':
                    self.handle_api_suggest_activity()
                elif path == '/api/speech-to-text':
                    self.handle_api_speech_to_text()
                else:
                    self.send_json_response({"error": "API endpoint not found"})
            else:
                # Default route or unauthorized access
                if current_user["user_id"] is None and path not in ['/', '/login']:
                    self.send_redirect('/login')
                else:
                    self.send_not_found()
        
        def do_POST(self):
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length).decode('utf-8')
            
            # Check if the request is JSON or form data
            content_type = self.headers.get('Content-Type', '')
            
            if 'application/json' in content_type:
                # Parse JSON data
                try:
                    json_data = json.loads(post_data)
                    
                    # Handle different JSON API endpoints
                    if self.path == '/api/chat' and current_user["user_id"]:
                        self.handle_api_chat_post(json_data)
                    elif self.path == '/api/suggest-activity' and current_user["user_id"]:
                        self.handle_api_suggest_activity_post(json_data)
                    elif self.path == '/api/speech-to-text' and current_user["user_id"]:
                        self.handle_api_speech_to_text_post(json_data)
                    else:
                        self.send_json_response({"error": "API endpoint not found"})
                except json.JSONDecodeError:
                    self.send_json_response({"error": "Invalid JSON data"})
                
            else:
                # Parse form data
                form_data = urllib.parse.parse_qs(post_data)
                
                # Handle different form submissions
                if self.path == '/login':
                    self.handle_login(form_data)
                elif self.path == '/register':
                    self.handle_register(form_data)
                elif self.path == '/add_transaction' and current_user["user_id"]:
                    self.handle_add_transaction(form_data)
                elif self.path == '/add_health_metric' and current_user["user_id"]:
                    self.handle_add_health_metric(form_data)
                elif self.path == '/add_event' and current_user["user_id"]:
                    self.handle_add_event(form_data)
                elif self.path == '/add_task' and current_user["user_id"]:
                    self.handle_add_task(form_data)
                elif self.path == '/api/health_advice' and current_user["user_id"]:
                    self.handle_health_advice(form_data)
                else:
                    self.send_error(404)
        
        def send_redirect(self, location):
            self.send_response(302)
            self.send_header('Location', location)
            self.end_headers()
        
        def send_json_response(self, data):
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=UTF-8')
            self.end_headers()
            self.wfile.write(json.dumps(data).encode('utf-8'))
        
        def send_home_page(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=UTF-8')
            self.end_headers()
            
            # Define HTML content
            html_content = f'''
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Persian Life Manager</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/Vazirmatn-font-face.css">
    <style>
        :root {{
            --main-bg-color: #121212;
            --card-bg-color: #1e1e1e;
            --sidebar-bg-color: #171717;
            --neon-color: #00ffaa;
            --neon-glow: 0 0 10px rgba(0, 255, 170, 0.7);
            --text-color: #ecf0f1;
            --border-color: #2d2d2d;
        }}
        
        body {{
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--main-bg-color);
            color: var(--text-color);
            direction: rtl;
            line-height: 1.6;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }}
        
        .hero {{
            text-align: center;
            padding: 80px 20px;
            background-color: rgba(0, 0, 0, 0.4);
            margin-bottom: 40px;
            border-radius: 10px;
            position: relative;
            overflow: hidden;
        }}
        
        .hero::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at center, rgba(0, 255, 170, 0.1) 0%, rgba(0, 0, 0, 0) 70%);
            z-index: -1;
        }}
        
        .logo {{
            font-size: 3rem;
            font-weight: bold;
            color: var(--neon-color);
            text-shadow: var(--neon-glow);
            margin-bottom: 20px;
        }}
        
        .subtitle {{
            font-size: 1.5rem;
            color: var(--text-color);
            margin-bottom: 40px;
        }}
        
        .features {{
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 30px;
            margin-bottom: 60px;
        }}
        
        .feature-card {{
            background-color: var(--card-bg-color);
            border: 1px solid var(--border-color);
            border-radius: 10px;
            padding: 30px;
            width: 300px;
            text-align: center;
            transition: all 0.3s ease;
        }}
        
        .feature-card:hover {{
            transform: translateY(-10px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2), 0 0 15px rgba(0, 255, 170, 0.3);
            border-color: var(--neon-color);
        }}
        
        .feature-icon {{
            font-size: 3rem;
            margin-bottom: 20px;
            color: var(--neon-color);
        }}
        
        .feature-title {{
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 15px;
            color: var(--neon-color);
        }}
        
        .cta-container {{
            text-align: center;
            margin: 60px 0;
        }}
        
        .neon-button {{
            display: inline-block;
            background-color: transparent;
            color: var(--neon-color);
            border: 2px solid var(--neon-color);
            border-radius: 5px;
            padding: 15px 30px;
            font-size: 1.2rem;
            font-weight: bold;
            text-decoration: none;
            margin: 10px;
            box-shadow: 0 0 10px rgba(0, 255, 170, 0.5);
            transition: all 0.3s ease;
        }}
        
        .neon-button:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            box-shadow: 0 0 20px rgba(0, 255, 170, 0.8);
        }}
        
        .neon-button.alt {{
            color: #00aaff;
            border-color: #00aaff;
            box-shadow: 0 0 10px rgba(0, 170, 255, 0.5);
        }}
        
        .neon-button.alt:hover {{
            background-color: rgba(0, 170, 255, 0.1);
            box-shadow: 0 0 20px rgba(0, 170, 255, 0.8);
        }}
        
        .footer {{
            text-align: center;
            padding: 40px 0;
            border-top: 1px solid var(--border-color);
            margin-top: 60px;
        }}
        
        .copyright {{
            color: rgba(255, 255, 255, 0.5);
        }}
    </style>
</head>
<body>
    <div class="container">
        <section class="hero">
            <div class="logo">Persian Life Manager</div>
            <div class="subtitle">برنامه جامع مدیریت مالی، سلامت و زندگی با پشتیبانی از تقویم شمسی</div>
            <div class="cta-container">
                <a href="/login" class="neon-button">ورود به برنامه</a>
            </div>
        </section>
        
        <section class="features">
            <div class="feature-card">
                <div class="feature-icon">💰</div>
                <div class="feature-title">مدیریت مالی</div>
                <p>مدیریت هوشمند درآمدها و هزینه‌ها، دسته‌بندی تراکنش‌ها، گزارش‌های دوره‌ای و نمودارهای تحلیلی</p>
            </div>
            
            <div class="feature-card">
                <div class="feature-icon">❤️</div>
                <div class="feature-title">پیگیری سلامت</div>
                <p>ثبت و پیگیری فعالیت‌های ورزشی، وزن، فشار خون، و سایر معیارهای سلامتی به همراه توصیه‌های هوشمند</p>
            </div>
            
            <div class="feature-card">
                <div class="feature-icon">📅</div>
                <div class="feature-title">مدیریت زمان</div>
                <p>تقویم شمسی با امکان ثبت رویدادها، یادآوری، مدیریت وظایف و برنامه‌ریزی روزانه</p>
            </div>
        </section>
        
        <section class="cta-container">
            <a href="/login" class="neon-button">ورود به برنامه</a>
        </section>
        
        <footer class="footer">
            <div class="copyright">Persian Life Manager &copy; 2025</div>
        </footer>
    </div>
</body>
</html>
'''
            self.wfile.write(html_content.encode('utf-8'))
        
        def send_login_page(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=UTF-8')
            self.end_headers()
            
            # Define HTML content
            html_content = f'''
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ورود | Persian Life Manager</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/Vazirmatn-font-face.css">
    <style>
        :root {{
            --main-bg-color: #121212;
            --card-bg-color: #1e1e1e;
            --sidebar-bg-color: #171717;
            --neon-color: #00ffaa;
            --neon-blue: #00aaff;
            --neon-glow: 0 0 10px rgba(0, 255, 170, 0.7);
            --text-color: #ecf0f1;
            --border-color: #2d2d2d;
            --input-bg: #1a1a1a;
        }}
        
        body {{
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--main-bg-color);
            color: var(--text-color);
            direction: rtl;
            line-height: 1.6;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }}
        
        .login-container {{
            display: flex;
            width: 900px;
            max-width: 100%;
            height: 600px;
            background-color: var(--card-bg-color);
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.5);
        }}
        
        .left-panel {{
            flex: 1;
            background-color: #0a0a0a;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 40px;
            position: relative;
            overflow: hidden;
        }}
        
        .left-panel::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at center, rgba(0, 255, 170, 0.2) 0%, rgba(0, 0, 0, 0) 70%);
            z-index: 0;
        }}
        
        .app-title {{
            font-size: 28px;
            font-weight: bold;
            color: var(--neon-color);
            text-shadow: var(--neon-glow);
            margin-bottom: 20px;
            position: relative;
            z-index: 1;
        }}
        
        .app-subtitle {{
            font-size: 16px;
            color: var(--text-color);
            text-align: center;
            position: relative;
            z-index: 1;
        }}
        
        .right-panel {{
            flex: 1;
            padding: 40px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }}
        
        .login-title {{
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 30px;
            text-align: center;
        }}
        
        .form-group {{
            margin-bottom: 20px;
        }}
        
        .form-group label {{
            display: block;
            margin-bottom: 8px;
        }}
        
        .form-group input {{
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: var(--input-bg);
            color: var(--text-color);
            font-family: 'Vazirmatn', Arial, sans-serif;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }}
        
        .form-group input:focus {{
            outline: none;
            border-color: var(--neon-color);
        }}
        
        .form-check {{
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }}
        
        .form-check input {{
            margin-left: 10px;
        }}
        
        .button-group {{
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }}
        
        .neon-button {{
            background-color: transparent;
            color: var(--neon-color);
            border: 2px solid var(--neon-color);
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            text-decoration: none;
            cursor: pointer;
            box-shadow: 0 0 10px rgba(0, 255, 170, 0.5);
            transition: all 0.3s ease;
            font-family: 'Vazirmatn', Arial, sans-serif;
            flex: 1;
            margin: 0 5px;
            text-align: center;
        }}
        
        .neon-button:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            box-shadow: 0 0 20px rgba(0, 255, 170, 0.8);
        }}
        
        .neon-button.blue {{
            color: var(--neon-blue);
            border-color: var(--neon-blue);
            box-shadow: 0 0 10px rgba(0, 170, 255, 0.5);
        }}
        
        .neon-button.blue:hover {{
            background-color: rgba(0, 170, 255, 0.1);
            box-shadow: 0 0 20px rgba(0, 170, 255, 0.8);
        }}
        
        .back-link {{
            text-align: center;
            margin-top: 20px;
        }}
        
        .back-link a {{
            color: var(--text-color);
            text-decoration: none;
            font-size: 14px;
        }}
        
        .back-link a:hover {{
            color: var(--neon-color);
        }}
    </style>
</head>
<body>
    <div class="login-container">
        <div class="left-panel">
            <div class="app-title">مدیریت مالی، سلامتی و زمان‌بندی</div>
            <div class="app-subtitle">سامانه هوشمند برای زندگی مدرن</div>
        </div>
        
        <div class="right-panel">
            <div class="login-title">ورود به حساب کاربری</div>
            
            <form action="/login" method="post">
                <div class="form-group">
                    <label for="username">نام کاربری</label>
                    <input type="text" id="username" name="username" placeholder="نام کاربری خود را وارد کنید" required>
                </div>
                
                <div class="form-group">
                    <label for="password">رمز عبور</label>
                    <input type="password" id="password" name="password" placeholder="رمز عبور خود را وارد کنید" required>
                </div>
                
                <div class="form-check">
                    <input type="checkbox" id="remember" name="remember">
                    <label for="remember">مرا به خاطر بسپار</label>
                </div>
                
                <div style="color: var(--neon-color); text-align: center; margin-bottom: 15px;">
                    برای ورود به سیستم، هر نام کاربری و رمز عبور دلخواه را وارد کنید.
                </div>
                
                <div class="button-group">
                    <button type="submit" class="neon-button">ورود</button>
                    <button type="submit" class="neon-button blue" formaction="/register">ثبت نام</button>
                </div>
            </form>
            
            <div class="back-link">
                <a href="/">بازگشت به صفحه اصلی</a>
            </div>
        </div>
    </div>
</body>
</html>
'''
            self.wfile.write(html_content.encode('utf-8'))
        
        def send_dashboard_page(self):
            if current_user["user_id"] is None:
                self.send_redirect('/login')
                return
                
            # Get user data
            user_id = current_user["user_id"]
            finance_service = FinanceService(user_id, db_path)
            health_service = HealthService(user_id, db_path)
            calendar_service = CalendarService(user_id, db_path)
            
            # Get summary data
            finance_summary = finance_service.get_monthly_summary()
            upcoming_events = calendar_service.get_upcoming_events(3)
            pending_tasks = calendar_service.get_pending_tasks(3)
            
            # Format data for display
            total_income = finance_summary.get('income', 0)
            total_expense = finance_summary.get('expense', 0)
            balance = total_income - total_expense
            
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=UTF-8')
            self.end_headers()
            
            # Create events and tasks HTML
            events_html = ""
            if upcoming_events:
                for event in upcoming_events:
                    events_html += f'''
                    <div class="item">
                        <div class="item-title">{event.title}</div>
                        <div class="item-date">{event.date}</div>
                    </div>
                    '''
            else:
                events_html = "<div class='empty-message'>رویدادی وجود ندارد</div>"
                
            tasks_html = ""
            if pending_tasks:
                for task in pending_tasks:
                    tasks_html += f'''
                    <div class="item">
                        <div class="item-title">{task.title}</div>
                        <div class="item-date">موعد: {task.due_date}</div>
                    </div>
                    '''
            else:
                tasks_html = "<div class='empty-message'>وظیفه‌ای وجود ندارد</div>"
                
            html_content = f'''
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>داشبورد | Persian Life Manager</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/Vazirmatn-font-face.css">
    <style>
        :root {{
            --main-bg-color: #121212;
            --card-bg-color: #1e1e1e;
            --sidebar-bg-color: #171717;
            --neon-color: #00ffaa;
            --neon-blue: #00aaff;
            --neon-pink: #ff0080;
            --neon-glow: 0 0 10px rgba(0, 255, 170, 0.7);
            --text-color: #ecf0f1;
            --border-color: #2d2d2d;
            --input-bg: #1a1a1a;
        }}
        
        body {{
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--main-bg-color);
            color: var(--text-color);
            direction: rtl;
            line-height: 1.6;
        }}
        
        .app-container {{
            display: flex;
            min-height: 100vh;
        }}
        
        .sidebar {{
            width: 250px;
            background-color: var(--sidebar-bg-color);
            padding: 20px 0;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.2);
        }}
        
        .user-profile {{
            padding: 20px;
            text-align: center;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 20px;
        }}
        
        .username {{
            font-size: 18px;
            font-weight: bold;
            color: var(--neon-color);
            margin-bottom: 5px;
        }}
        
        .nav-menu {{
            list-style: none;
            padding: 0;
            margin: 0;
        }}
        
        .nav-item {{
            padding: 0;
        }}
        
        .nav-link {{
            display: block;
            padding: 12px 20px;
            color: var(--text-color);
            text-decoration: none;
            transition: all 0.3s ease;
            border-right: 3px solid transparent;
        }}
        
        .nav-link:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            color: var(--neon-color);
        }}
        
        .nav-link.active {{
            background-color: rgba(0, 255, 170, 0.2);
            color: var(--neon-color);
            border-right-color: var(--neon-color);
            font-weight: bold;
        }}
        
        .icon {{
            margin-left: 10px;
            font-size: 18px;
        }}
        
        .content {{
            flex: 1;
            padding: 30px;
        }}
        
        .page-title {{
            font-size: 24px;
            margin-bottom: 30px;
            color: var(--neon-color);
        }}
        
        .date-display {{
            margin-bottom: 20px;
            font-size: 16px;
        }}
        
        .cards-container {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        
        .card {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }}
        
        .card:hover {{
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            border-color: var(--neon-color);
        }}
        
        .card-green {{
            border-color: var(--neon-color);
        }}
        
        .card-blue {{
            border-color: var(--neon-blue);
        }}
        
        .card-pink {{
            border-color: var(--neon-pink);
        }}
        
        .card-title {{
            font-size: 16px;
            margin-bottom: 15px;
            color: var(--text-color);
        }}
        
        .card-value {{
            font-size: 24px;
            font-weight: bold;
        }}
        
        .value-positive {{
            color: var(--neon-color);
        }}
        
        .value-negative {{
            color: var(--neon-pink);
        }}
        
        .value-neutral {{
            color: var(--neon-blue);
        }}
        
        .sections-container {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }}
        
        .section {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid var(--border-color);
        }}
        
        .section-title {{
            font-size: 18px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
            color: var(--neon-color);
        }}
        
        .item {{
            padding: 10px 0;
            border-bottom: 1px solid rgba(45, 45, 45, 0.5);
        }}
        
        .item:last-child {{
            border-bottom: none;
        }}
        
        .item-title {{
            font-weight: bold;
            margin-bottom: 5px;
        }}
        
        .item-date {{
            font-size: 14px;
            color: rgba(236, 240, 241, 0.7);
        }}
        
        .empty-message {{
            color: rgba(236, 240, 241, 0.5);
            text-align: center;
            padding: 20px;
        }}
        
        .logout {{
            margin-top: auto;
            padding: 20px;
            text-align: center;
            border-top: 1px solid var(--border-color);
        }}
        
        .logout a {{
            color: var(--text-color);
            text-decoration: none;
        }}
        
        .logout a:hover {{
            color: var(--neon-pink);
        }}
    </style>
</head>
<body>
    <div class="app-container">
        <div class="sidebar">
            <div class="user-profile">
                <div class="username">{current_user["username"]}</div>
            </div>
            
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="/dashboard" class="nav-link active">
                        <span class="icon">🏠</span>
                        داشبورد
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/finance" class="nav-link">
                        <span class="icon">💰</span>
                        مدیریت مالی
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/health" class="nav-link">
                        <span class="icon">❤️</span>
                        سلامتی
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/calendar" class="nav-link">
                        <span class="icon">📅</span>
                        زمان‌بندی
                    </a>
                </li>
            </ul>
            
            <div class="logout">
                <a href="/logout">
                    <span class="icon">🚪</span>
                    خروج
                </a>
            </div>
        </div>
        
        <div class="content">
            <h1 class="page-title">داشبورد</h1>
            
            <div class="date-display">تاریخ: {self.get_current_persian_date()}</div>
            
            <div class="cards-container">
                <div class="card card-green">
                    <div class="card-title">درآمد ماه جاری</div>
                    <div class="card-value value-positive">{self.format_currency(total_income)} تومان</div>
                </div>
                
                <div class="card card-pink">
                    <div class="card-title">هزینه ماه جاری</div>
                    <div class="card-value value-negative">{self.format_currency(total_expense)} تومان</div>
                </div>
                
                <div class="card card-blue">
                    <div class="card-title">موجودی</div>
                    <div class="card-value value-neutral">{self.format_currency(balance)} تومان</div>
                </div>
            </div>
            
            <div class="sections-container">
                <div class="section">
                    <h2 class="section-title">رویدادهای پیش رو</h2>
                    {events_html}
                </div>
                
                <div class="section">
                    <h2 class="section-title">وظایف در انتظار</h2>
                    {tasks_html}
                </div>
            </div>
        </div>
    </div>
</body>
</html>
'''
            self.wfile.write(html_content.encode('utf-8'))
            
        def send_finance_page(self):
            if current_user["user_id"] is None:
                self.send_redirect('/login')
                return
                
            # Get finance data
            user_id = current_user["user_id"]
            finance_service = FinanceService(user_id, db_path)
            
            # Get data
            categories = finance_service.get_categories()
            transactions = finance_service.get_transactions(limit=10)
            
            # Format category options for select
            income_options = ""
            expense_options = ""
            
            for category in categories:
                if category.type == "income" or category.type == "both":
                    income_options += f'<option value="{category.id}">{category.name}</option>'
                if category.type == "expense" or category.type == "both":
                    expense_options += f'<option value="{category.id}">{category.name}</option>'
            
            # Format transactions table
            transactions_html = ""
            if transactions:
                for tx in transactions:
                    tx_type_class = "expense" if tx.type == "expense" else "income"
                    transactions_html += f'''
                    <tr class="{tx_type_class}">
                        <td>{tx.date}</td>
                        <td>{tx.title}</td>
                        <td>{tx.category_name}</td>
                        <td class="{tx_type_class}-amount">{self.format_currency(tx.amount)} تومان</td>
                    </tr>
                    '''
            else:
                transactions_html = '''
                <tr>
                    <td colspan="4" class="empty-message">هیچ تراکنشی ثبت نشده است</td>
                </tr>
                '''
                
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=UTF-8')
            self.end_headers()
            
            html_content = f'''
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>مدیریت مالی | Persian Life Manager</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/Vazirmatn-font-face.css">
    <style>
        :root {{
            --main-bg-color: #121212;
            --card-bg-color: #1e1e1e;
            --sidebar-bg-color: #171717;
            --neon-color: #00ffaa;
            --neon-blue: #00aaff;
            --neon-pink: #ff0080;
            --neon-glow: 0 0 10px rgba(0, 255, 170, 0.7);
            --text-color: #ecf0f1;
            --border-color: #2d2d2d;
            --input-bg: #1a1a1a;
        }}
        
        body {{
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--main-bg-color);
            color: var(--text-color);
            direction: rtl;
            line-height: 1.6;
        }}
        
        .app-container {{
            display: flex;
            min-height: 100vh;
        }}
        
        .sidebar {{
            width: 250px;
            background-color: var(--sidebar-bg-color);
            padding: 20px 0;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.2);
        }}
        
        .user-profile {{
            padding: 20px;
            text-align: center;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 20px;
        }}
        
        .username {{
            font-size: 18px;
            font-weight: bold;
            color: var(--neon-color);
            margin-bottom: 5px;
        }}
        
        .nav-menu {{
            list-style: none;
            padding: 0;
            margin: 0;
        }}
        
        .nav-item {{
            padding: 0;
        }}
        
        .nav-link {{
            display: block;
            padding: 12px 20px;
            color: var(--text-color);
            text-decoration: none;
            transition: all 0.3s ease;
            border-right: 3px solid transparent;
        }}
        
        .nav-link:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            color: var(--neon-color);
        }}
        
        .nav-link.active {{
            background-color: rgba(0, 255, 170, 0.2);
            color: var(--neon-color);
            border-right-color: var(--neon-color);
            font-weight: bold;
        }}
        
        .icon {{
            margin-left: 10px;
            font-size: 18px;
        }}
        
        .content {{
            flex: 1;
            padding: 30px;
        }}
        
        .page-title {{
            font-size: 24px;
            margin-bottom: 30px;
            color: var(--neon-color);
        }}
        
        .finance-container {{
            display: grid;
            grid-template-columns: 1fr 1.5fr;
            gap: 30px;
        }}
        
        .form-section {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid var(--border-color);
        }}
        
        .form-section-title {{
            font-size: 18px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
            color: var(--neon-color);
        }}
        
        .form-group {{
            margin-bottom: 15px;
        }}
        
        .form-group label {{
            display: block;
            margin-bottom: 8px;
        }}
        
        .form-control {{
            width: 100%;
            padding: 10px 15px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: var(--input-bg);
            color: var(--text-color);
            font-family: 'Vazirmatn', Arial, sans-serif;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }}
        
        .form-control:focus {{
            outline: none;
            border-color: var(--neon-color);
        }}
        
        .tab-container {{
            margin-bottom: 20px;
        }}
        
        .tab-buttons {{
            display: flex;
            margin-bottom: 20px;
        }}
        
        .tab-button {{
            flex: 1;
            padding: 10px;
            text-align: center;
            background-color: var(--input-bg);
            color: var(--text-color);
            border: none;
            cursor: pointer;
            font-family: 'Vazirmatn', Arial, sans-serif;
            font-weight: bold;
            transition: all 0.3s ease;
        }}
        
        .tab-button:first-child {{
            border-radius: 0 5px 5px 0;
        }}
        
        .tab-button:last-child {{
            border-radius: 5px 0 0 5px;
        }}
        
        .tab-button.active {{
            background-color: rgba(0, 255, 170, 0.2);
            color: var(--neon-color);
        }}
        
        .tab-content {{
            display: none;
        }}
        
        .tab-content.active {{
            display: block;
        }}
        
        .transactions-section {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid var(--border-color);
        }}
        
        .transactions-table {{
            width: 100%;
            border-collapse: collapse;
        }}
        
        .transactions-table th,
        .transactions-table td {{
            padding: 12px 15px;
            text-align: right;
            border-bottom: 1px solid var(--border-color);
        }}
        
        .transactions-table th {{
            background-color: var(--input-bg);
            font-weight: bold;
        }}
        
        .expense-amount {{
            color: var(--neon-pink);
        }}
        
        .income-amount {{
            color: var(--neon-color);
        }}
        
        .neon-button {{
            background-color: transparent;
            color: var(--neon-color);
            border: 2px solid var(--neon-color);
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 0 10px rgba(0, 255, 170, 0.5);
            transition: all 0.3s ease;
            font-family: 'Vazirmatn', Arial, sans-serif;
            display: inline-block;
            margin-top: 15px;
        }}
        
        .neon-button:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            box-shadow: 0 0 20px rgba(0, 255, 170, 0.8);
        }}
        
        .neon-button.pink {{
            color: var(--neon-pink);
            border-color: var(--neon-pink);
            box-shadow: 0 0 10px rgba(255, 0, 128, 0.5);
        }}
        
        .neon-button.pink:hover {{
            background-color: rgba(255, 0, 128, 0.1);
            box-shadow: 0 0 20px rgba(255, 0, 128, 0.8);
        }}
        
        .logout {{
            margin-top: auto;
            padding: 20px;
            text-align: center;
            border-top: 1px solid var(--border-color);
        }}
        
        .logout a {{
            color: var(--text-color);
            text-decoration: none;
        }}
        
        .logout a:hover {{
            color: var(--neon-pink);
        }}
        
        .empty-message {{
            color: rgba(236, 240, 241, 0.5);
            text-align: center;
            padding: 20px;
        }}
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function() {{
            // Tab switching functionality
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabButtons.forEach(button => {{
                button.addEventListener('click', () => {{
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));
                    
                    // Add active class to clicked button and corresponding content
                    button.classList.add('active');
                    const tabId = button.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                }});
            }});
        }});
    </script>
</head>
<body>
    <div class="app-container">
        <div class="sidebar">
            <div class="user-profile">
                <div class="username">{current_user["username"]}</div>
            </div>
            
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="/dashboard" class="nav-link">
                        <span class="icon">🏠</span>
                        داشبورد
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/finance" class="nav-link active">
                        <span class="icon">💰</span>
                        مدیریت مالی
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/health" class="nav-link">
                        <span class="icon">❤️</span>
                        سلامتی
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/calendar" class="nav-link">
                        <span class="icon">📅</span>
                        زمان‌بندی
                    </a>
                </li>
            </ul>
            
            <div class="logout">
                <a href="/logout">
                    <span class="icon">🚪</span>
                    خروج
                </a>
            </div>
        </div>
        
        <div class="content">
            <h1 class="page-title">مدیریت مالی</h1>
            
            <div class="finance-container">
                <div class="form-section">
                    <h2 class="form-section-title">ثبت تراکنش جدید</h2>
                    
                    <div class="tab-container">
                        <div class="tab-buttons">
                            <button class="tab-button active" data-tab="expense-tab">هزینه</button>
                            <button class="tab-button" data-tab="income-tab">درآمد</button>
                        </div>
                        
                        <div id="expense-tab" class="tab-content active">
                            <form action="/add_transaction" method="post">
                                <input type="hidden" name="type" value="expense">
                                
                                <div class="form-group">
                                    <label for="expense-title">عنوان</label>
                                    <input type="text" class="form-control" id="expense-title" name="title" required>
                                </div>
                                
                                <div class="form-group">
                                    <label for="expense-amount">مبلغ (تومان)</label>
                                    <input type="number" class="form-control" id="expense-amount" name="amount" required>
                                </div>
                                
                                <div class="form-group">
                                    <label for="expense-category">دسته‌بندی</label>
                                    <select class="form-control" id="expense-category" name="category_id" required>
                                        {expense_options}
                                    </select>
                                </div>
                                
                                <div class="form-group">
                                    <label for="expense-date">تاریخ</label>
                                    <input type="date" class="form-control" id="expense-date" name="date" required>
                                </div>
                                
                                <div class="form-group">
                                    <label for="expense-description">توضیحات (اختیاری)</label>
                                    <textarea class="form-control" id="expense-description" name="description" rows="3"></textarea>
                                </div>
                                
                                <button type="submit" class="neon-button pink">ثبت هزینه</button>
                            </form>
                        </div>
                        
                        <div id="income-tab" class="tab-content">
                            <form action="/add_transaction" method="post">
                                <input type="hidden" name="type" value="income">
                                
                                <div class="form-group">
                                    <label for="income-title">عنوان</label>
                                    <input type="text" class="form-control" id="income-title" name="title" required>
                                </div>
                                
                                <div class="form-group">
                                    <label for="income-amount">مبلغ (تومان)</label>
                                    <input type="number" class="form-control" id="income-amount" name="amount" required>
                                </div>
                                
                                <div class="form-group">
                                    <label for="income-category">دسته‌بندی</label>
                                    <select class="form-control" id="income-category" name="category_id" required>
                                        {income_options}
                                    </select>
                                </div>
                                
                                <div class="form-group">
                                    <label for="income-date">تاریخ</label>
                                    <input type="date" class="form-control" id="income-date" name="date" required>
                                </div>
                                
                                <div class="form-group">
                                    <label for="income-description">توضیحات (اختیاری)</label>
                                    <textarea class="form-control" id="income-description" name="description" rows="3"></textarea>
                                </div>
                                
                                <button type="submit" class="neon-button">ثبت درآمد</button>
                            </form>
                        </div>
                    </div>
                </div>
                
                <div class="transactions-section">
                    <h2 class="form-section-title">تراکنش‌های اخیر</h2>
                    
                    <table class="transactions-table">
                        <thead>
                            <tr>
                                <th>تاریخ</th>
                                <th>عنوان</th>
                                <th>دسته‌بندی</th>
                                <th>مبلغ</th>
                            </tr>
                        </thead>
                        <tbody>
                            {transactions_html}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
'''
            self.wfile.write(html_content.encode('utf-8'))
            
        def send_health_page(self):
            if current_user["user_id"] is None:
                self.send_redirect('/login')
                return
                
            # Get health data
            user_id = current_user["user_id"]
            health_service = HealthService(user_id, db_path)
            
            # Get data
            exercises = health_service.get_exercises(limit=5)
            metrics = health_service.get_metrics(limit=5)
            goals = health_service.get_goals()
            
            # Format exercise list
            exercises_html = ""
            if exercises:
                for exercise in exercises:
                    exercises_html += f'''
                    <tr>
                        <td>{exercise.date}</td>
                        <td>{exercise.exercise_type}</td>
                        <td>{exercise.duration} دقیقه</td>
                        <td>{exercise.calories_burned} کالری</td>
                    </tr>
                    '''
            else:
                exercises_html = '''
                <tr>
                    <td colspan="4" class="empty-message">هیچ فعالیت ورزشی ثبت نشده است</td>
                </tr>
                '''
                
            # Format metrics list
            metrics_html = ""
            if metrics:
                for metric in metrics:
                    weight_str = f"{metric.weight} کیلوگرم" if metric.weight else "-"
                    bp_str = f"{metric.systolic}/{metric.diastolic}" if metric.systolic and metric.diastolic else "-"
                    heart_rate_str = f"{metric.heart_rate} bpm" if metric.heart_rate else "-"
                    sleep_str = f"{metric.sleep_hours} ساعت" if metric.sleep_hours else "-"
                    
                    metrics_html += f'''
                    <tr>
                        <td>{metric.date}</td>
                        <td>{weight_str}</td>
                        <td>{bp_str}</td>
                        <td>{heart_rate_str}</td>
                        <td>{sleep_str}</td>
                    </tr>
                    '''
            else:
                metrics_html = '''
                <tr>
                    <td colspan="5" class="empty-message">هیچ معیار سلامتی ثبت نشده است</td>
                </tr>
                '''
                
            # Format goals list
            goals_html = ""
            if goals:
                for goal in goals:
                    progress_style = f"width: {goal.progress}%"
                    progress_class = "good" if goal.progress >= 75 else "medium" if goal.progress >= 40 else "low"
                    
                    goals_html += f'''
                    <div class="goal-item">
                        <div class="goal-info">
                            <div class="goal-title">{goal.goal_type}: {goal.target_value}</div>
                            <div class="goal-deadline">موعد: {goal.deadline}</div>
                        </div>
                        <div class="goal-progress-container">
                            <div class="goal-progress-bar {progress_class}" style="{progress_style}"></div>
                            <div class="goal-progress-text">{goal.progress}%</div>
                        </div>
                    </div>
                    '''
            else:
                goals_html = '<div class="empty-message">هیچ هدفی تعریف نشده است</div>'
                
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=UTF-8')
            self.end_headers()
            
            html_content = f'''
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>سلامتی | Persian Life Manager</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/Vazirmatn-font-face.css">
    <style>
        :root {{
            --main-bg-color: #121212;
            --card-bg-color: #1e1e1e;
            --sidebar-bg-color: #171717;
            --neon-color: #00ffaa;
            --neon-blue: #00aaff;
            --neon-pink: #ff0080;
            --neon-glow: 0 0 10px rgba(0, 255, 170, 0.7);
            --text-color: #ecf0f1;
            --border-color: #2d2d2d;
            --input-bg: #1a1a1a;
        }}
        
        body {{
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--main-bg-color);
            color: var(--text-color);
            direction: rtl;
            line-height: 1.6;
        }}
        
        .app-container {{
            display: flex;
            min-height: 100vh;
        }}
        
        .sidebar {{
            width: 250px;
            background-color: var(--sidebar-bg-color);
            padding: 20px 0;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.2);
        }}
        
        .user-profile {{
            padding: 20px;
            text-align: center;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 20px;
        }}
        
        .username {{
            font-size: 18px;
            font-weight: bold;
            color: var(--neon-color);
            margin-bottom: 5px;
        }}
        
        .nav-menu {{
            list-style: none;
            padding: 0;
            margin: 0;
        }}
        
        .nav-item {{
            padding: 0;
        }}
        
        .nav-link {{
            display: block;
            padding: 12px 20px;
            color: var(--text-color);
            text-decoration: none;
            transition: all 0.3s ease;
            border-right: 3px solid transparent;
        }}
        
        .nav-link:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            color: var(--neon-color);
        }}
        
        .nav-link.active {{
            background-color: rgba(0, 255, 170, 0.2);
            color: var(--neon-color);
            border-right-color: var(--neon-color);
            font-weight: bold;
        }}
        
        .icon {{
            margin-left: 10px;
            font-size: 18px;
        }}
        
        .content {{
            flex: 1;
            padding: 30px;
        }}
        
        .page-title {{
            font-size: 24px;
            margin-bottom: 30px;
            color: var(--neon-color);
        }}
        
        .health-container {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }}
        
        .form-section {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid var(--border-color);
            grid-column: 1;
        }}
        
        .data-section {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid var(--border-color);
            grid-column: 2;
        }}
        
        .goals-section {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid var(--border-color);
            grid-column: 1 / -1;
        }}
        
        .section-title {{
            font-size: 18px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
            color: var(--neon-color);
        }}
        
        .form-group {{
            margin-bottom: 15px;
        }}
        
        .form-group label {{
            display: block;
            margin-bottom: 8px;
        }}
        
        .form-control {{
            width: 100%;
            padding: 10px 15px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: var(--input-bg);
            color: var(--text-color);
            font-family: 'Vazirmatn', Arial, sans-serif;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }}
        
        .form-control:focus {{
            outline: none;
            border-color: var(--neon-color);
        }}
        
        .tab-container {{
            margin-bottom: 20px;
        }}
        
        .tab-buttons {{
            display: flex;
            margin-bottom: 20px;
        }}
        
        .tab-button {{
            flex: 1;
            padding: 10px;
            text-align: center;
            background-color: var(--input-bg);
            color: var(--text-color);
            border: none;
            cursor: pointer;
            font-family: 'Vazirmatn', Arial, sans-serif;
            font-weight: bold;
            transition: all 0.3s ease;
        }}
        
        .tab-button:first-child {{
            border-radius: 0 5px 5px 0;
        }}
        
        .tab-button:last-child {{
            border-radius: 5px 0 0 5px;
        }}
        
        .tab-button.active {{
            background-color: rgba(0, 255, 170, 0.2);
            color: var(--neon-color);
        }}
        
        .tab-content {{
            display: none;
        }}
        
        .tab-content.active {{
            display: block;
        }}
        
        .data-table {{
            width: 100%;
            border-collapse: collapse;
        }}
        
        .data-table th,
        .data-table td {{
            padding: 12px 15px;
            text-align: right;
            border-bottom: 1px solid var(--border-color);
        }}
        
        .data-table th {{
            background-color: var(--input-bg);
            font-weight: bold;
        }}
        
        .goal-item {{
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: var(--input-bg);
        }}
        
        .goal-info {{
            margin-bottom: 10px;
        }}
        
        .goal-title {{
            font-weight: bold;
            font-size: 16px;
        }}
        
        .goal-deadline {{
            font-size: 14px;
            color: rgba(236, 240, 241, 0.7);
        }}
        
        .goal-progress-container {{
            height: 20px;
            background-color: #2d2d2d;
            border-radius: 10px;
            position: relative;
            overflow: hidden;
        }}
        
        .goal-progress-bar {{
            height: 100%;
            background-color: var(--neon-color);
            border-radius: 10px;
            transition: width 0.5s ease;
        }}
        
        .goal-progress-bar.low {{
            background-color: var(--neon-pink);
        }}
        
        .goal-progress-bar.medium {{
            background-color: var(--neon-blue);
        }}
        
        .goal-progress-text {{
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: #fff;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
        }}
        
        .neon-button {{
            background-color: transparent;
            color: var(--neon-color);
            border: 2px solid var(--neon-color);
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 0 10px rgba(0, 255, 170, 0.5);
            transition: all 0.3s ease;
            font-family: 'Vazirmatn', Arial, sans-serif;
            display: inline-block;
            margin-top: 15px;
        }}
        
        .neon-button:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            box-shadow: 0 0 20px rgba(0, 255, 170, 0.8);
        }}
        
        .neon-button.blue {{
            color: var(--neon-blue);
            border-color: var(--neon-blue);
            box-shadow: 0 0 10px rgba(0, 170, 255, 0.5);
        }}
        
        .neon-button.blue:hover {{
            background-color: rgba(0, 170, 255, 0.1);
            box-shadow: 0 0 20px rgba(0, 170, 255, 0.8);
        }}
        
        .logout {{
            margin-top: auto;
            padding: 20px;
            text-align: center;
            border-top: 1px solid var(--border-color);
        }}
        
        .logout a {{
            color: var(--text-color);
            text-decoration: none;
        }}
        
        .logout a:hover {{
            color: var(--neon-pink);
        }}
        
        .empty-message {{
            color: rgba(236, 240, 241, 0.5);
            text-align: center;
            padding: 20px;
        }}
        
        .ai-advice-section {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid var(--neon-blue);
            grid-column: 1 / -1;
            margin-top: 30px;
        }}
        
        .ai-title {{
            color: var(--neon-blue);
            display: flex;
            align-items: center;
        }}
        
        .ai-title .ai-icon {{
            margin-left: 10px;
            font-size: 24px;
        }}
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function() {{
            // Tab switching functionality
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabButtons.forEach(button => {{
                button.addEventListener('click', () => {{
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));
                    
                    // Add active class to clicked button and corresponding content
                    button.classList.add('active');
                    const tabId = button.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                }});
            }});
        }});
    </script>
</head>
<body>
    <div class="app-container">
        <div class="sidebar">
            <div class="user-profile">
                <div class="username">{current_user["username"]}</div>
            </div>
            
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="/dashboard" class="nav-link">
                        <span class="icon">🏠</span>
                        داشبورد
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/finance" class="nav-link">
                        <span class="icon">💰</span>
                        مدیریت مالی
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/health" class="nav-link active">
                        <span class="icon">❤️</span>
                        سلامتی
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/calendar" class="nav-link">
                        <span class="icon">📅</span>
                        زمان‌بندی
                    </a>
                </li>
            </ul>
            
            <div class="logout">
                <a href="/logout">
                    <span class="icon">🚪</span>
                    خروج
                </a>
            </div>
        </div>
        
        <div class="content">
            <h1 class="page-title">پیگیری سلامتی</h1>
            
            <div class="health-container">
                <div class="form-section">
                    <h2 class="section-title">ثبت فعالیت ورزشی</h2>
                    
                    <form action="/add_health_metric" method="post">
                        <input type="hidden" name="type" value="exercise">
                        
                        <div class="form-group">
                            <label for="exercise-type">نوع فعالیت</label>
                            <select class="form-control" id="exercise-type" name="exercise_type" required>
                                <option value="walking">پیاده‌روی</option>
                                <option value="running">دویدن</option>
                                <option value="cycling">دوچرخه‌سواری</option>
                                <option value="swimming">شنا</option>
                                <option value="gym">باشگاه بدنسازی</option>
                                <option value="yoga">یوگا</option>
                                <option value="other">سایر</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="exercise-duration">مدت زمان (دقیقه)</label>
                            <input type="number" class="form-control" id="exercise-duration" name="duration" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="exercise-calories">کالری سوزانده شده (تخمینی)</label>
                            <input type="number" class="form-control" id="exercise-calories" name="calories_burned">
                        </div>
                        
                        <div class="form-group">
                            <label for="exercise-date">تاریخ</label>
                            <input type="date" class="form-control" id="exercise-date" name="date" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="exercise-notes">یادداشت (اختیاری)</label>
                            <textarea class="form-control" id="exercise-notes" name="notes" rows="2"></textarea>
                        </div>
                        
                        <button type="submit" class="neon-button">ثبت فعالیت</button>
                    </form>
                </div>
                
                <div class="data-section">
                    <h2 class="section-title">فعالیت‌های اخیر</h2>
                    
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>تاریخ</th>
                                <th>نوع فعالیت</th>
                                <th>مدت زمان</th>
                                <th>کالری</th>
                            </tr>
                        </thead>
                        <tbody>
                            {exercises_html}
                        </tbody>
                    </table>
                </div>
                
                <div class="form-section">
                    <h2 class="section-title">ثبت معیارهای سلامتی</h2>
                    
                    <form action="/add_health_metric" method="post">
                        <input type="hidden" name="type" value="metrics">
                        
                        <div class="form-group">
                            <label for="weight">وزن (کیلوگرم)</label>
                            <input type="number" step="0.1" class="form-control" id="weight" name="weight">
                        </div>
                        
                        <div class="form-group">
                            <label for="systolic">فشار خون (سیستولیک)</label>
                            <input type="number" class="form-control" id="systolic" name="systolic">
                        </div>
                        
                        <div class="form-group">
                            <label for="diastolic">فشار خون (دیاستولیک)</label>
                            <input type="number" class="form-control" id="diastolic" name="diastolic">
                        </div>
                        
                        <div class="form-group">
                            <label for="heart-rate">ضربان قلب (bpm)</label>
                            <input type="number" class="form-control" id="heart-rate" name="heart_rate">
                        </div>
                        
                        <div class="form-group">
                            <label for="sleep-hours">ساعات خواب</label>
                            <input type="number" step="0.5" class="form-control" id="sleep-hours" name="sleep_hours">
                        </div>
                        
                        <div class="form-group">
                            <label for="metrics-date">تاریخ</label>
                            <input type="date" class="form-control" id="metrics-date" name="date" required>
                        </div>
                        
                        <button type="submit" class="neon-button blue">ثبت معیارها</button>
                    </form>
                </div>
                
                <div class="data-section">
                    <h2 class="section-title">معیارهای سلامتی اخیر</h2>
                    
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>تاریخ</th>
                                <th>وزن</th>
                                <th>فشار خون</th>
                                <th>ضربان قلب</th>
                                <th>خواب</th>
                            </tr>
                        </thead>
                        <tbody>
                            {metrics_html}
                        </tbody>
                    </table>
                </div>
                
                <div class="goals-section">
                    <h2 class="section-title">اهداف سلامتی</h2>
                    
                    <div class="goals-container">
                        {goals_html}
                    </div>
                </div>
                
                <div class="ai-advice-section">
                    <h2 class="section-title ai-title">
                        <span class="ai-icon">🤖</span>
                        دریافت توصیه هوشمند
                    </h2>
                    
                    <form action="/api/health_advice" method="post" id="adviceForm">
                        <div class="form-group">
                            <label for="height">قد (سانتی‌متر)</label>
                            <input type="number" class="form-control" id="height" name="height" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="weight-advice">وزن (کیلوگرم)</label>
                            <input type="number" step="0.1" class="form-control" id="weight-advice" name="weight" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="activity-level">سطح فعالیت</label>
                            <select class="form-control" id="activity-level" name="activity_level" required>
                                <option value="sedentary">کم تحرک</option>
                                <option value="light">فعالیت سبک</option>
                                <option value="moderate">فعالیت متوسط</option>
                                <option value="high">فعالیت زیاد</option>
                                <option value="athlete">ورزشکار</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="health-conditions">شرایط سلامتی (اختیاری)</label>
                            <textarea class="form-control" id="health-conditions" name="health_conditions" rows="2" placeholder="مانند: دیابت، فشار خون بالا"></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="goal-focus">هدف اصلی</label>
                            <select class="form-control" id="goal-focus" name="goal_focus" required>
                                <option value="weight_loss">کاهش وزن</option>
                                <option value="weight_gain">افزایش وزن</option>
                                <option value="maintain">حفظ وزن</option>
                                <option value="fitness">افزایش تناسب اندام</option>
                                <option value="health">بهبود سلامت عمومی</option>
                            </select>
                        </div>
                        
                        <button type="submit" class="neon-button blue">دریافت توصیه هوشمند</button>
                    </form>
                    
                    <div id="advice-result" style="margin-top: 20px; padding: 15px; border-radius: 5px; background-color: rgba(0, 170, 255, 0.1); border: 1px solid var(--neon-blue); display: none;"></div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Handle AI advice form submission
        document.getElementById('adviceForm').addEventListener('submit', function(event) {{
            event.preventDefault();
            
            // Get form data
            const formData = new FormData(this);
            const formParams = new URLSearchParams();
            
            for (const pair of formData) {{
                formParams.append(pair[0], pair[1]);
            }}
            
            // Show loading
            const resultDiv = document.getElementById('advice-result');
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = 'در حال دریافت توصیه...';
            
            // Send request
            fetch('/api/health_advice', {{
                method: 'POST',
                body: formParams,
                headers: {{
                    'Content-Type': 'application/x-www-form-urlencoded'
                }}
            }})
            .then(response => response.json())
            .then(data => {{
                if (data.success) {{
                    resultDiv.innerHTML = data.advice;
                }} else {{
                    resultDiv.innerHTML = 'خطا در دریافت توصیه. لطفا دوباره تلاش کنید.';
                }}
            }})
            .catch(error => {{
                resultDiv.innerHTML = 'خطا در ارتباط با سرور. لطفا دوباره تلاش کنید.';
                console.error('Error:', error);
            }});
        }});
    </script>
</body>
</html>
'''
            self.wfile.write(html_content.encode('utf-8'))
        
        def send_calendar_page(self):
            if current_user["user_id"] is None:
                self.send_redirect('/login')
                return
                
            # Get calendar data
            user_id = current_user["user_id"]
            calendar_service = CalendarService(user_id, db_path)
            
            # Get data
            events = calendar_service.get_upcoming_events(5)
            pending_tasks = calendar_service.get_pending_tasks(5)
            completed_tasks = calendar_service.get_completed_tasks(5)
            
            # Format events list
            events_html = ""
            if events:
                for event in events:
                    time_str = ""
                    if event.start_time:
                        time_str = f"{event.start_time}"
                        if event.end_time:
                            time_str += f" - {event.end_time}"
                    else:
                        time_str = "تمام روز"
                    
                    events_html += f'''
                    <div class="event-item">
                        <div class="event-title">{event.title}</div>
                        <div class="event-time">{time_str}</div>
                        <div class="event-date">{event.date}</div>
                        {f'<div class="event-location">محل: {event.location}</div>' if event.location else ''}
                    </div>
                    '''
            else:
                events_html = '<div class="empty-message">هیچ رویداد آینده‌ای وجود ندارد</div>'
                
            # Format pending tasks list
            pending_tasks_html = ""
            if pending_tasks:
                for task in pending_tasks:
                    priority_class = ""
                    if task.priority == "high":
                        priority_class = "high-priority"
                    elif task.priority == "medium":
                        priority_class = "medium-priority"
                    else:
                        priority_class = "low-priority"
                        
                    pending_tasks_html += f'''
                    <div class="task-item {priority_class}">
                        <div class="task-title">{task.title}</div>
                        <div class="task-date">موعد: {task.due_date}</div>
                    </div>
                    '''
            else:
                pending_tasks_html = '<div class="empty-message">هیچ وظیفه در انتظاری وجود ندارد</div>'
                
            # Format completed tasks list
            completed_tasks_html = ""
            if completed_tasks:
                for task in completed_tasks:
                    completed_tasks_html += f'''
                    <div class="task-item completed">
                        <div class="task-title">{task.title}</div>
                        <div class="task-date">تکمیل شده در: {task.completion_date}</div>
                    </div>
                    '''
            else:
                completed_tasks_html = '<div class="empty-message">هیچ وظیفه تکمیل شده‌ای وجود ندارد</div>'
                
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=UTF-8')
            self.end_headers()
            
            html_content = f'''
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>زمان‌بندی | Persian Life Manager</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/Vazirmatn-font-face.css">
    <style>
        :root {{
            --main-bg-color: #121212;
            --card-bg-color: #1e1e1e;
            --sidebar-bg-color: #171717;
            --neon-color: #00ffaa;
            --neon-blue: #00aaff;
            --neon-pink: #ff0080;
            --neon-purple: #aa00ff;
            --neon-glow: 0 0 10px rgba(0, 255, 170, 0.7);
            --text-color: #ecf0f1;
            --border-color: #2d2d2d;
            --input-bg: #1a1a1a;
        }}
        
        body {{
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--main-bg-color);
            color: var(--text-color);
            direction: rtl;
            line-height: 1.6;
        }}
        
        .app-container {{
            display: flex;
            min-height: 100vh;
        }}
        
        .sidebar {{
            width: 250px;
            background-color: var(--sidebar-bg-color);
            padding: 20px 0;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.2);
        }}
        
        .user-profile {{
            padding: 20px;
            text-align: center;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 20px;
        }}
        
        .username {{
            font-size: 18px;
            font-weight: bold;
            color: var(--neon-color);
            margin-bottom: 5px;
        }}
        
        .nav-menu {{
            list-style: none;
            padding: 0;
            margin: 0;
        }}
        
        .nav-item {{
            padding: 0;
        }}
        
        .nav-link {{
            display: block;
            padding: 12px 20px;
            color: var(--text-color);
            text-decoration: none;
            transition: all 0.3s ease;
            border-right: 3px solid transparent;
        }}
        
        .nav-link:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            color: var(--neon-color);
        }}
        
        .nav-link.active {{
            background-color: rgba(0, 255, 170, 0.2);
            color: var(--neon-color);
            border-right-color: var(--neon-color);
            font-weight: bold;
        }}
        
        .icon {{
            margin-left: 10px;
            font-size: 18px;
        }}
        
        .content {{
            flex: 1;
            padding: 30px;
        }}
        
        .page-title {{
            font-size: 24px;
            margin-bottom: 30px;
            color: var(--neon-color);
        }}
        
        .calendar-container {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }}
        
        .form-section {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid var(--border-color);
        }}
        
        .events-section {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid var(--border-color);
        }}
        
        .tasks-section {{
            background-color: var(--card-bg-color);
            border-radius: 10px;
            padding: 20px;
            border: 1px solid var(--border-color);
            grid-column: 1 / -1;
        }}
        
        .section-title {{
            font-size: 18px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
            color: var(--neon-color);
        }}
        
        .form-group {{
            margin-bottom: 15px;
        }}
        
        .form-group label {{
            display: block;
            margin-bottom: 8px;
        }}
        
        .form-control {{
            width: 100%;
            padding: 10px 15px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: var(--input-bg);
            color: var(--text-color);
            font-family: 'Vazirmatn', Arial, sans-serif;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }}
        
        .form-control:focus {{
            outline: none;
            border-color: var(--neon-color);
        }}
        
        .form-check {{
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }}
        
        .form-check input {{
            margin-left: 10px;
        }}
        
        .tab-container {{
            margin-bottom: 20px;
        }}
        
        .tab-buttons {{
            display: flex;
            margin-bottom: 20px;
        }}
        
        .tab-button {{
            flex: 1;
            padding: 10px;
            text-align: center;
            background-color: var(--input-bg);
            color: var(--text-color);
            border: none;
            cursor: pointer;
            font-family: 'Vazirmatn', Arial, sans-serif;
            font-weight: bold;
            transition: all 0.3s ease;
        }}
        
        .tab-button:first-child {{
            border-radius: 0 5px 5px 0;
        }}
        
        .tab-button:last-child {{
            border-radius: 5px 0 0 5px;
        }}
        
        .tab-button.active {{
            background-color: rgba(0, 255, 170, 0.2);
            color: var(--neon-color);
        }}
        
        .tab-content {{
            display: none;
        }}
        
        .tab-content.active {{
            display: block;
        }}
        
        .event-item {{
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid var(--neon-color);
            border-radius: 5px;
            background-color: rgba(0, 255, 170, 0.05);
        }}
        
        .event-title {{
            font-weight: bold;
            font-size: 16px;
            color: var(--neon-color);
        }}
        
        .event-time {{
            margin-top: 5px;
            font-size: 14px;
        }}
        
        .event-date, .event-location {{
            font-size: 14px;
            color: rgba(236, 240, 241, 0.7);
        }}
        
        .tasks-container {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }}
        
        .tasks-list {{
            margin-bottom: 20px;
        }}
        
        .tasks-list-title {{
            font-size: 16px;
            margin-bottom: 15px;
            color: var(--neon-blue);
        }}
        
        .task-item {{
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: var(--input-bg);
        }}
        
        .task-item.high-priority {{
            border-color: var(--neon-pink);
            background-color: rgba(255, 0, 128, 0.05);
        }}
        
        .task-item.medium-priority {{
            border-color: var(--neon-blue);
            background-color: rgba(0, 170, 255, 0.05);
        }}
        
        .task-item.low-priority {{
            border-color: var(--neon-purple);
            background-color: rgba(170, 0, 255, 0.05);
        }}
        
        .task-item.completed {{
            border-color: var(--neon-color);
            background-color: rgba(0, 255, 170, 0.05);
        }}
        
        .task-title {{
            font-weight: bold;
            font-size: 16px;
        }}
        
        .task-date {{
            font-size: 14px;
            color: rgba(236, 240, 241, 0.7);
            margin-top: 5px;
        }}
        
        .neon-button {{
            background-color: transparent;
            color: var(--neon-color);
            border: 2px solid var(--neon-color);
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 0 10px rgba(0, 255, 170, 0.5);
            transition: all 0.3s ease;
            font-family: 'Vazirmatn', Arial, sans-serif;
            display: inline-block;
            margin-top: 15px;
        }}
        
        .neon-button:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            box-shadow: 0 0 20px rgba(0, 255, 170, 0.8);
        }}
        
        .neon-button.blue {{
            color: var(--neon-blue);
            border-color: var(--neon-blue);
            box-shadow: 0 0 10px rgba(0, 170, 255, 0.5);
        }}
        
        .neon-button.blue:hover {{
            background-color: rgba(0, 170, 255, 0.1);
            box-shadow: 0 0 20px rgba(0, 170, 255, 0.8);
        }}
        
        .logout {{
            margin-top: auto;
            padding: 20px;
            text-align: center;
            border-top: 1px solid var(--border-color);
        }}
        
        .logout a {{
            color: var(--text-color);
            text-decoration: none;
        }}
        
        .logout a:hover {{
            color: var(--neon-pink);
        }}
        
        .empty-message {{
            color: rgba(236, 240, 241, 0.5);
            text-align: center;
            padding: 20px;
        }}
        
        .time-inputs {{
            display: flex;
            gap: 10px;
        }}
        
        .time-inputs .form-control {{
            flex: 1;
        }}
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function() {{
            // Tab switching functionality
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabButtons.forEach(button => {{
                button.addEventListener('click', () => {{
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));
                    
                    // Add active class to clicked button and corresponding content
                    button.classList.add('active');
                    const tabId = button.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                }});
            }});
            
            // Toggle all-day event
            const allDayCheckbox = document.getElementById('all-day');
            const timeInputsContainer = document.getElementById('time-inputs');
            
            if (allDayCheckbox && timeInputsContainer) {{
                allDayCheckbox.addEventListener('change', function() {{
                    if (this.checked) {{
                        timeInputsContainer.style.display = 'none';
                    }} else {{
                        timeInputsContainer.style.display = 'flex';
                    }}
                }});
            }}
        }});
    </script>
</head>
<body>
    <div class="app-container">
        <div class="sidebar">
            <div class="user-profile">
                <div class="username">{current_user["username"]}</div>
            </div>
            
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="/dashboard" class="nav-link">
                        <span class="icon">🏠</span>
                        داشبورد
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/finance" class="nav-link">
                        <span class="icon">💰</span>
                        مدیریت مالی
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/health" class="nav-link">
                        <span class="icon">❤️</span>
                        سلامتی
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/calendar" class="nav-link active">
                        <span class="icon">📅</span>
                        زمان‌بندی
                    </a>
                </li>
            </ul>
            
            <div class="logout">
                <a href="/logout">
                    <span class="icon">🚪</span>
                    خروج
                </a>
            </div>
        </div>
        
        <div class="content">
            <h1 class="page-title">مدیریت زمان</h1>
            
            <div class="calendar-container">
                <div class="form-section">
                    <h2 class="section-title">افزودن رویداد</h2>
                    
                    <form action="/add_event" method="post">
                        <input type="hidden" name="type" value="event">
                        
                        <div class="form-group">
                            <label for="event-title">عنوان رویداد</label>
                            <input type="text" class="form-control" id="event-title" name="title" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="event-date">تاریخ</label>
                            <input type="date" class="form-control" id="event-date" name="date" required>
                        </div>
                        
                        <div class="form-check">
                            <input type="checkbox" id="all-day" name="all_day" value="1">
                            <label for="all-day">رویداد تمام روز</label>
                        </div>
                        
                        <div class="form-group" id="time-inputs">
                            <div class="time-inputs">
                                <div class="form-group">
                                    <label for="start-time">زمان شروع</label>
                                    <input type="time" class="form-control" id="start-time" name="start_time">
                                </div>
                                
                                <div class="form-group">
                                    <label for="end-time">زمان پایان</label>
                                    <input type="time" class="form-control" id="end-time" name="end_time">
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="event-location">مکان (اختیاری)</label>
                            <input type="text" class="form-control" id="event-location" name="location">
                        </div>
                        
                        <div class="form-group">
                            <label for="event-description">توضیحات (اختیاری)</label>
                            <textarea class="form-control" id="event-description" name="description" rows="3"></textarea>
                        </div>
                        
                        <div class="form-check">
                            <input type="checkbox" id="has-reminder" name="has_reminder" value="1">
                            <label for="has-reminder">یادآوری</label>
                        </div>
                        
                        <button type="submit" class="neon-button">ثبت رویداد</button>
                    </form>
                </div>
                
                <div class="events-section">
                    <h2 class="section-title">رویدادهای آینده</h2>
                    
                    <div class="events-list">
                        {events_html}
                    </div>
                </div>
                
                <div class="form-section">
                    <h2 class="section-title">افزودن وظیفه</h2>
                    
                    <form action="/add_task" method="post">
                        <input type="hidden" name="type" value="task">
                        
                        <div class="form-group">
                            <label for="task-title">عنوان وظیفه</label>
                            <input type="text" class="form-control" id="task-title" name="title" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="due-date">تاریخ موعد</label>
                            <input type="date" class="form-control" id="due-date" name="due_date" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="priority">اولویت</label>
                            <select class="form-control" id="priority" name="priority">
                                <option value="low">کم</option>
                                <option value="medium" selected>متوسط</option>
                                <option value="high">زیاد</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="task-description">توضیحات (اختیاری)</label>
                            <textarea class="form-control" id="task-description" name="description" rows="3"></textarea>
                        </div>
                        
                        <div class="form-check">
                            <input type="checkbox" id="task-reminder" name="has_reminder" value="1">
                            <label for="task-reminder">یادآوری</label>
                        </div>
                        
                        <button type="submit" class="neon-button blue">ثبت وظیفه</button>
                    </form>
                </div>
                
                <div class="tasks-section">
                    <h2 class="section-title">وظایف</h2>
                    
                    <div class="tasks-container">
                        <div class="tasks-list">
                            <h3 class="tasks-list-title">وظایف در انتظار</h3>
                            {pending_tasks_html}
                        </div>
                        
                        <div class="tasks-list">
                            <h3 class="tasks-list-title">وظایف تکمیل شده</h3>
                            {completed_tasks_html}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
'''
            self.wfile.write(html_content.encode('utf-8'))
            
        def send_not_found(self):
            self.send_response(404)
            self.send_header('Content-type', 'text/html; charset=UTF-8')
            self.end_headers()
            
            # Define HTML content
            html_content = f'''
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>صفحه یافت نشد | Persian Life Manager</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/Vazirmatn-font-face.css">
    <style>
        :root {{
            --main-bg-color: #121212;
            --neon-color: #00ffaa;
            --neon-glow: 0 0 10px rgba(0, 255, 170, 0.7);
            --text-color: #ecf0f1;
        }}
        
        body {{
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--main-bg-color);
            color: var(--text-color);
            direction: rtl;
            line-height: 1.6;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            text-align: center;
        }}
        
        .error-container {{
            max-width: 600px;
            padding: 40px;
        }}
        
        .error-code {{
            font-size: 8rem;
            font-weight: bold;
            color: var(--neon-color);
            text-shadow: var(--neon-glow);
            margin-bottom: 20px;
        }}
        
        .error-message {{
            font-size: 2rem;
            margin-bottom: 30px;
        }}
        
        .error-description {{
            font-size: 1.2rem;
            margin-bottom: 40px;
        }}
        
        .back-link {{
            display: inline-block;
            background-color: transparent;
            color: var(--neon-color);
            border: 2px solid var(--neon-color);
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 1.2rem;
            font-weight: bold;
            text-decoration: none;
            box-shadow: 0 0 10px rgba(0, 255, 170, 0.5);
            transition: all 0.3s ease;
        }}
        
        .back-link:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            box-shadow: 0 0 20px rgba(0, 255, 170, 0.8);
        }}
    </style>
</head>
<body>
    <div class="error-container">
        <div class="error-code">404</div>
        <div class="error-message">صفحه یافت نشد</div>
        <div class="error-description">متأسفانه صفحه‌ای که به دنبال آن هستید وجود ندارد یا حذف شده است.</div>
        <a href="/" class="back-link">بازگشت به صفحه اصلی</a>
    </div>
</body>
</html>
'''
            self.wfile.write(html_content.encode('utf-8'))
            
        def handle_login(self, form_data):
            username = form_data.get('username', [''])[0]
            password = form_data.get('password', [''])[0]
            
            if not username or not password:
                self.send_redirect('/login')
                return
            
            # First try Firebase login
            try:
                from app.core.firebase_adapter import FirebaseAdapter
                firebase_adapter = FirebaseAdapter()
                
                if firebase_adapter.enabled:
                    logger.info(f"Attempting Firebase login for user {username}")
                    user = firebase_adapter.firebase_login(username, password)
                    if user:
                        current_user["user_id"] = user.id
                        current_user["username"] = user.username
                        current_user["firebase_uid"] = getattr(user, "firebase_uid", None)
                        logger.info(f"User {username} logged in via Firebase")
                        self.send_redirect('/dashboard')
                        return
            except ImportError:
                logger.warning("Firebase adapter not available")
            except Exception as e:
                logger.error(f"Error during Firebase login: {str(e)}")
            
            # Fallback to SQLite login
            logger.info(f"Attempting SQLite login for user {username}")
            user = auth_service.login(username, password)
            if user:
                current_user["user_id"] = user.id
                current_user["username"] = user.username
                current_user["firebase_uid"] = None
                self.send_redirect('/dashboard')
            else:
                # Auto register if user doesn't exist (for demo purposes)
                logger.info(f"Auto-registering user {username} for demo")
                user = auth_service.register(username, password)
                if user:
                    current_user["user_id"] = user.id
                    current_user["username"] = user.username
                    current_user["firebase_uid"] = None
                    self.send_redirect('/dashboard')
                else:
                    self.send_redirect('/login')
                
        def handle_register(self, form_data):
            username = form_data.get('username', [''])[0]
            password = form_data.get('password', [''])[0]
            
            if not username or not password:
                self.send_redirect('/login')
                return
                
            if len(password) < 6:
                self.send_redirect('/login')
                return
            
            # Check if user exists first
            if auth_service.user_exists(username):
                self.send_redirect('/login')
                return
            
            # Try Firebase registration
            try:
                from app.core.firebase_adapter import FirebaseAdapter
                firebase_adapter = FirebaseAdapter()
                
                if firebase_adapter.enabled:
                    logger.info(f"Attempting Firebase registration for user {username}")
                    user = firebase_adapter.firebase_register(username, password)
                    if user:
                        current_user["user_id"] = user.id
                        current_user["username"] = user.username
                        current_user["firebase_uid"] = getattr(user, "firebase_uid", None)
                        logger.info(f"User {username} registered via Firebase")
                        self.send_redirect('/dashboard')
                        return
            except ImportError:
                logger.warning("Firebase adapter not available")
            except Exception as e:
                logger.error(f"Error during Firebase registration: {str(e)}")
            
            # Fallback to SQLite registration
            logger.info(f"Attempting SQLite registration for user {username}")
            user = auth_service.register(username, password)
            if user:
                current_user["user_id"] = user.id
                current_user["username"] = user.username
                current_user["firebase_uid"] = None
                self.send_redirect('/dashboard')
            else:
                self.send_redirect('/login')
                
        def handle_add_transaction(self, form_data):
            if current_user["user_id"] is None:
                self.send_redirect('/login')
                return
                
            user_id = current_user["user_id"]
            finance_service = FinanceService(user_id, db_path)
            
            title = form_data.get('title', [''])[0]
            amount = form_data.get('amount', ['0'])[0]
            category_id = form_data.get('category_id', [''])[0]
            date = form_data.get('date', [''])[0]
            description = form_data.get('description', [''])[0]
            tx_type = form_data.get('type', ['expense'])[0]
            
            try:
                from app.models.finance import Transaction
                
                transaction = Transaction(
                    id=None,
                    user_id=user_id,
                    title=title,
                    amount=float(amount),
                    date=date,
                    type=tx_type,
                    category_id=int(category_id),
                    description=description
                )
                
                # Save to SQLite
                transaction_id = finance_service.add_transaction(transaction)
                transaction.id = transaction_id
                
                # Also save to Firebase if available
                firebase_uid = current_user.get("firebase_uid")
                if firebase_uid:
                    try:
                        from app.core.firebase_adapter import FirebaseAdapter
                        firebase_adapter = FirebaseAdapter()
                        
                        if firebase_adapter.enabled:
                            logger.info(f"Adding transaction to Firebase for user {firebase_uid}")
                            firebase_adapter.add_transaction_to_firebase(transaction, firebase_uid)
                    except ImportError:
                        logger.warning("Firebase adapter not available")
                    except Exception as e:
                        logger.error(f"Error adding transaction to Firebase: {str(e)}")
                
                self.send_redirect('/finance')
            except Exception as e:
                logger.error(f"Error adding transaction: {str(e)}")
                self.send_redirect('/finance')
                
        def handle_add_health_metric(self, form_data):
            if current_user["user_id"] is None:
                self.send_redirect('/login')
                return
                
            user_id = current_user["user_id"]
            health_service = HealthService(user_id, db_path)
            
            metric_type = form_data.get('type', [''])[0]
            date = form_data.get('date', [''])[0]
            
            try:
                if metric_type == 'exercise':
                    from app.models.health import Exercise
                    
                    exercise_type = form_data.get('exercise_type', [''])[0]
                    duration = form_data.get('duration', ['0'])[0]
                    calories_burned = form_data.get('calories_burned', ['0'])[0]
                    notes = form_data.get('notes', [''])[0]
                    
                    exercise = Exercise(
                        id=None,
                        user_id=user_id,
                        date=date,
                        exercise_type=exercise_type,
                        duration=int(duration),
                        calories_burned=int(calories_burned),
                        notes=notes
                    )
                    
                    health_service.add_exercise(exercise)
                
                elif metric_type == 'metrics':
                    from app.models.health import HealthMetric
                    
                    weight = form_data.get('weight', [''])[0]
                    systolic = form_data.get('systolic', [''])[0]
                    diastolic = form_data.get('diastolic', [''])[0]
                    heart_rate = form_data.get('heart_rate', [''])[0]
                    sleep_hours = form_data.get('sleep_hours', [''])[0]
                    
                    # Convert empty strings to None
                    weight = float(weight) if weight else None
                    systolic = int(systolic) if systolic else None
                    diastolic = int(diastolic) if diastolic else None
                    heart_rate = int(heart_rate) if heart_rate else None
                    sleep_hours = float(sleep_hours) if sleep_hours else None
                    
                    metrics = HealthMetric(
                        id=None,
                        user_id=user_id,
                        date=date,
                        weight=weight,
                        systolic=systolic,
                        diastolic=diastolic,
                        heart_rate=heart_rate,
                        sleep_hours=sleep_hours
                    )
                    
                    health_service.add_metrics(metrics)
                
                self.send_redirect('/health')
            except Exception as e:
                logger.error(f"Error adding health metric: {str(e)}")
                self.send_redirect('/health')
                
        def handle_add_event(self, form_data):
            if current_user["user_id"] is None:
                self.send_redirect('/login')
                return
                
            user_id = current_user["user_id"]
            calendar_service = CalendarService(user_id, db_path)
            
            title = form_data.get('title', [''])[0]
            date = form_data.get('date', [''])[0]
            all_day = 'all_day' in form_data
            start_time = form_data.get('start_time', [''])[0] if not all_day else None
            end_time = form_data.get('end_time', [''])[0] if not all_day else None
            location = form_data.get('location', [''])[0]
            description = form_data.get('description', [''])[0]
            has_reminder = 'has_reminder' in form_data
            
            try:
                from app.models.calendar import Event
                
                event = Event(
                    id=None,
                    user_id=user_id,
                    title=title,
                    date=date,
                    start_time=start_time,
                    end_time=end_time,
                    location=location,
                    description=description,
                    all_day=all_day,
                    has_reminder=has_reminder
                )
                
                reminder_data = None
                if has_reminder:
                    reminder_data = {
                        'value': 30,  # Default 30 minutes before
                        'unit': 'minutes'
                    }
                
                calendar_service.add_event(event, reminder_data)
                self.send_redirect('/calendar')
            except Exception as e:
                logger.error(f"Error adding event: {str(e)}")
                self.send_redirect('/calendar')
                
        def handle_add_task(self, form_data):
            if current_user["user_id"] is None:
                self.send_redirect('/login')
                return
                
            user_id = current_user["user_id"]
            calendar_service = CalendarService(user_id, db_path)
            
            title = form_data.get('title', [''])[0]
            due_date = form_data.get('due_date', [''])[0]
            priority = form_data.get('priority', ['medium'])[0]
            description = form_data.get('description', [''])[0]
            has_reminder = 'has_reminder' in form_data
            
            try:
                from app.models.calendar import Task
                
                task = Task(
                    id=None,
                    user_id=user_id,
                    title=title,
                    due_date=due_date,
                    priority=priority,
                    description=description,
                    completed=False,
                    completion_date=None,
                    has_reminder=has_reminder
                )
                
                reminder_data = None
                if has_reminder:
                    reminder_data = {
                        'value': 1,  # Default 1 day before
                        'unit': 'days'
                    }
                
                calendar_service.add_task(task, reminder_data)
                self.send_redirect('/calendar')
            except Exception as e:
                logger.error(f"Error adding task: {str(e)}")
                self.send_redirect('/calendar')
                
        def handle_health_advice(self, form_data):
            if current_user["user_id"] is None:
                self.send_json_response({"success": False, "error": "Unauthorized"})
                return
                
            height = form_data.get('height', ['0'])[0]
            weight = form_data.get('weight', ['0'])[0]
            activity_level = form_data.get('activity_level', ['moderate'])[0]
            health_conditions = form_data.get('health_conditions', [''])[0]
            goal_focus = form_data.get('goal_focus', ['health'])[0]
            
            try:
                height = float(height)
                weight = float(weight)
                
                advice = ai_service.get_health_advice(
                    height=height,
                    weight=weight,
                    activity_level=activity_level,
                    health_conditions=health_conditions,
                    goal_focus=goal_focus
                )
                
                self.send_json_response({"success": True, "advice": advice})
            except Exception as e:
                logger.error(f"Error getting health advice: {str(e)}")
                self.send_json_response({"success": False, "error": str(e)})
                
        def get_current_persian_date(self):
            try:
                from app.utils.date_utils import get_current_persian_date
                return get_current_persian_date()
            except ImportError:
                import jdatetime
                today = jdatetime.date.today()
                return f"{today.year}/{today.month}/{today.day}"
                
        def format_currency(self, amount):
            try:
                from app.utils.persian_utils import format_currency
                return format_currency(amount)
            except ImportError:
                # Simple formatting without the utility function
                return f"{amount:,.0f}"
        
        def send_ai_chat_page(self):
            """Send the AI chat interface page"""
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=UTF-8')
            self.end_headers()
            
            # Define HTML content - using a simple approach to avoid syntax issues
            username = current_user["username"] if current_user["username"] else "کاربر"
            
            html_content = '''
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>چت هوشمند</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #121212;
            color: #ecf0f1;
            direction: rtl;
            margin: 0;
            padding: 0;
        }
        .navbar {
            background-color: #1e1e1e;
            padding: 15px;
            text-align: center;
        }
        .content {
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }
        .chat-container {
            background-color: #1e1e1e;
            border-radius: 8px;
            padding: 20px;
            margin-top: 20px;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 8px;
        }
        .ai-message {
            background-color: rgba(0, 255, 170, 0.1);
            border: 1px solid #00ffaa;
        }
        .user-message {
            background-color: rgba(0, 170, 255, 0.1);
            border: 1px solid #00aaff;
            text-align: left;
        }
        .input-area {
            display: flex;
            margin-top: 20px;
        }
        input {
            flex: 1;
            padding: 10px;
            border: 1px solid #2d2d2d;
            background-color: #1a1a1a;
            color: #ecf0f1;
            border-radius: 4px;
            margin-left: 10px;
        }
        button {
            padding: 10px 20px;
            background-color: transparent;
            color: #00ffaa;
            border: 1px solid #00ffaa;
            border-radius: 4px;
            cursor: pointer;
        }
        h1, h2 {
            color: #00ffaa;
        }
        a {
            color: #ecf0f1;
            text-decoration: none;
            margin: 0 10px;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <h1>Persian Life Manager</h1>
        <div>
            <a href="/dashboard">داشبورد</a>
            <a href="/finance">مالی</a>
            <a href="/health">سلامت</a>
            <a href="/calendar">تقویم</a>
            <a href="/ai-chat">چت هوشمند</a>
            <a href="/logout">خروج</a>
        </div>
    </div>
    
    <div class="content">
        <h2>چت هوشمند</h2>
        
        <div class="chat-container" id="chat-container">
            <div class="message ai-message">سلام ''' + username + '''! من دستیار هوشمند Persian Life Manager هستم. چطور می‌توانم به شما کمک کنم؟</div>
        </div>
        
        <div class="input-area">
            <input type="text" id="user-input" placeholder="پیام خود را بنویسید...">
            <button id="send-button">ارسال</button>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatContainer = document.getElementById('chat-container');
            const userInput = document.getElementById('user-input');
            const sendButton = document.getElementById('send-button');
            let chatHistory = [];
            
            function addMessage(content, isUser) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                messageDiv.classList.add(isUser ? 'user-message' : 'ai-message');
                messageDiv.textContent = content;
                chatContainer.appendChild(messageDiv);
            }
            
            async function sendMessage(message) {
                if (!message.trim()) return;
                
                addMessage(message, true);
                
                try {
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: message,
                            history: chatHistory
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.error) {
                        addMessage('متأسفانه خطایی رخ داد: ' + data.error, false);
                    } else {
                        addMessage(data.response, false);
                        
                        chatHistory.push({
                            role: 'user',
                            content: message
                        });
                        
                        chatHistory.push({
                            role: 'assistant',
                            content: data.response
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    addMessage('متأسفانه خطایی رخ داد. لطفاً دوباره تلاش کنید.', false);
                }
            }
            
            sendButton.addEventListener('click', function() {
                const message = userInput.value;
                if (message.trim()) {
                    sendMessage(message);
                    userInput.value = '';
                }
            });
            
            userInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    const message = userInput.value;
                    if (message.trim()) {
                        sendMessage(message);
                        userInput.value = '';
                    }
                }
            });
        });
    </script>
</body>
</html>
'''
            self.wfile.write(html_content.encode('utf-8'))
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>چت هوشمند | Persian Life Manager</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/Vazirmatn-font-face.css">
    <style>
        :root {
            --main-bg-color: #121212;
            --card-bg-color: #1e1e1e;
            --sidebar-bg-color: #171717;
            --neon-color: #00ffaa;
            --neon-pink: #ff00aa;
            --neon-blue: #00aaff;
            --neon-glow: 0 0 10px rgba(0, 255, 170, 0.7);
            --text-color: #ecf0f1;
            --border-color: #2d2d2d;
            --input-bg: #1a1a1a;
        }
        
        body {
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--main-bg-color);
            color: var(--text-color);
            direction: rtl;
            line-height: 1.6;
        }
        
        /* Navbar styles */
        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 60px;
            background-color: rgba(30, 30, 30, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }
        
        .navbar-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
            height: 100%;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .navbar-logo {
            font-size: 20px;
            font-weight: bold;
            color: var(--neon-color);
            text-shadow: var(--neon-glow);
        }
        
        .navbar-links {
            display: flex;
        }
        
        .navbar-link {
            color: var(--text-color);
            text-decoration: none;
            margin-right: 20px;
            padding: 5px 10px;
            border-radius: 4px;
            transition: all 0.3s ease;
        }
        
        .navbar-link:hover {
            color: var(--neon-color);
            background-color: rgba(0, 255, 170, 0.1);
        }
        
        .navbar-link.active {
            color: var(--neon-color);
            border-bottom: 2px solid var(--neon-color);
        }
        
        .navbar-link.logout {
            color: #ff5555;
        }
        
        .navbar-link.logout:hover {
            color: #ff5555;
            background-color: rgba(255, 85, 85, 0.1);
        }
        
        .content-container {
            padding: 20px;
            margin-top: 70px;
        }
        
        .page-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
            color: var(--neon-color);
            text-shadow: 0 0 5px rgba(0, 255, 170, 0.5);
        }
        
        .chat-container {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 140px);
            background-color: var(--card-bg-color);
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }
        
        .message {
            max-width: 80%;
            margin-bottom: 15px;
            padding: 12px 16px;
            border-radius: 10px;
            font-size: 16px;
            line-height: 1.5;
            animation: fade-in 0.3s ease-out;
        }
        
        @keyframes fade-in {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .user-message {
            align-self: flex-end;
            background-color: rgba(0, 170, 255, 0.2);
            border: 1px solid rgba(0, 170, 255, 0.4);
            border-bottom-right-radius: 0;
            box-shadow: 0 0 10px rgba(0, 170, 255, 0.2);
        }
        
        .ai-message {
            align-self: flex-start;
            background-color: rgba(0, 255, 170, 0.1);
            border: 1px solid rgba(0, 255, 170, 0.3);
            border-bottom-left-radius: 0;
            box-shadow: 0 0 10px rgba(0, 255, 170, 0.2);
        }
        
        .chat-input-container {
            display: flex;
            padding: 15px;
            background-color: rgba(0, 0, 0, 0.2);
            border-top: 1px solid var(--border-color);
        }
        
        .chat-input {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: var(--input-bg);
            color: var(--text-color);
            font-family: 'Vazirmatn', Arial, sans-serif;
            font-size: 16px;
            transition: border-color 0.3s ease;
            margin-left: 10px;
        }
        
        .chat-input:focus {
            outline: none;
            border-color: var(--neon-color);
            box-shadow: 0 0 5px rgba(0, 255, 170, 0.3);
        }
        
        .send-button {
            background-color: transparent;
            color: var(--neon-color);
            border: 2px solid var(--neon-color);
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 0 10px rgba(0, 255, 170, 0.3);
            transition: all 0.3s ease;
            font-family: 'Vazirmatn', Arial, sans-serif;
        }
        
        .send-button:hover {
            background-color: rgba(0, 255, 170, 0.1);
            box-shadow: 0 0 15px rgba(0, 255, 170, 0.5);
        }
        
        .voice-button {
            background-color: transparent;
            color: var(--neon-pink);
            border: 2px solid var(--neon-pink);
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 0 10px rgba(255, 0, 170, 0.3);
            transition: all 0.3s ease;
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin-left: 10px;
        }
        
        .voice-button:hover {
            background-color: rgba(255, 0, 170, 0.1);
            box-shadow: 0 0 15px rgba(255, 0, 170, 0.5);
        }
        
        .voice-button.recording {
            background-color: rgba(255, 0, 170, 0.2);
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 10px rgba(255, 0, 170, 0.5); }
            50% { box-shadow: 0 0 20px rgba(255, 0, 170, 0.8); }
            100% { box-shadow: 0 0 10px rgba(255, 0, 170, 0.5); }
        }
        
        .tools-container {
            margin-bottom: 20px;
        }
        
        .tool-button {
            background-color: transparent;
            color: var(--neon-blue);
            border: 2px solid var(--neon-blue);
            border-radius: 5px;
            padding: 8px 15px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 0 5px rgba(0, 170, 255, 0.3);
            transition: all 0.3s ease;
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin-left: 10px;
            margin-bottom: 10px;
        }
        
        .tool-button:hover {
            background-color: rgba(0, 170, 255, 0.1);
            box-shadow: 0 0 10px rgba(0, 170, 255, 0.5);
        }
        
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0, 255, 170, 0.3);
            border-radius: 50%;
            border-top-color: var(--neon-color);
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .thinking {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            color: rgba(255, 255, 255, 0.7);
            align-self: flex-start;
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="navbar-container">
            <div class="navbar-logo">Persian Life Manager</div>
            <div class="navbar-links">
                <a href="/dashboard" class="navbar-link">داشبورد</a>
                <a href="/finance" class="navbar-link">مالی</a>
                <a href="/health" class="navbar-link">سلامت</a>
                <a href="/calendar" class="navbar-link">تقویم</a>
                <a href="/ai-chat" class="navbar-link active">چت هوشمند</a>
                <a href="/logout" class="navbar-link logout">خروج</a>
            </div>
        </div>
    </nav>
    
    <div class="content-container">
        <div class="page-title">چت هوشمند Persian Life Manager</div>
        
        <div class="tools-container">
            <button class="tool-button" id="activity-suggestion">پیشنهاد فعالیت</button>
            <button class="tool-button" id="daily-plan">برنامه روزانه</button>
            <button class="tool-button" id="schedule-analysis">تحلیل برنامه</button>
        </div>
        
        <div class="chat-container">
            <div class="chat-messages" id="chat-messages">
                <div class="message ai-message" id="welcome-message">
                </div>
            </div>
            
            <div class="chat-input-container">
                <button class="voice-button" id="voice-button">
                    <i class="fas fa-microphone"></i> صدا
                </button>
                <input type="text" class="chat-input" id="chat-input" placeholder="پیام خود را بنویسید...">
                <button class="send-button" id="send-button">ارسال</button>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Update welcome message with username
            const welcomeMessage = document.getElementById('welcome-message');
            welcomeMessage.textContent = 'سلام """ + username + """! من دستیار هوشمند Persian Life Manager هستم. چطور می‌توانم به شما کمک کنم؟';
            
            const chatMessages = document.getElementById('chat-messages');
            const chatInput = document.getElementById('chat-input');
            const sendButton = document.getElementById('send-button');
            const voiceButton = document.getElementById('voice-button');
            const activityButton = document.getElementById('activity-suggestion');
            const dailyPlanButton = document.getElementById('daily-plan');
            const scheduleAnalysisButton = document.getElementById('schedule-analysis');
            
            let isRecording = false;
            let chatHistory = [];
            
            // Function to add a message to the chat
            function addMessage(content, isUser = false) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                messageDiv.classList.add(isUser ? 'user-message' : 'ai-message');
                messageDiv.textContent = content;
                
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                return messageDiv;
            }
            
            // Function to show thinking indicator
            function showThinking() {
                const thinkingDiv = document.createElement('div');
                thinkingDiv.classList.add('thinking');
                
                const loadingSpinner = document.createElement('div');
                loadingSpinner.classList.add('loading');
                thinkingDiv.appendChild(loadingSpinner);
                
                const thinkingText = document.createTextNode('در حال فکر کردن...');
                thinkingDiv.appendChild(thinkingText);
                
                chatMessages.appendChild(thinkingDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                return thinkingDiv;
            }
            
            // Send message to the AI
            async function sendMessage(message) {
                if (!message.trim()) return;
                
                // Add user message to chat
                addMessage(message, true);
                
                // Show thinking indicator
                const thinkingDiv = showThinking();
                
                try {
                    // Send to API
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: message,
                            history: chatHistory
                        })
                    });
                    
                    const data = await response.json();
                    
                    // Remove thinking indicator
                    chatMessages.removeChild(thinkingDiv);
                    
                    // Add AI response to chat
                    if (data.error) {
                        addMessage('متأسفانه خطایی رخ داد: ' + data.error);
                    } else {
                        addMessage(data.response);
                        
                        // Update chat history
                        chatHistory.push({
                            role: 'user',
                            content: message
                        });
                        
                        chatHistory.push({
                            role: 'assistant',
                            content: data.response
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    chatMessages.removeChild(thinkingDiv);
                    addMessage('متأسفانه خطایی رخ داد. لطفاً دوباره تلاش کنید.');
                }
            }
            
            // Handle send button click
            sendButton.addEventListener('click', function() {
                const message = chatInput.value;
                if (message.trim()) {
                    sendMessage(message);
                    chatInput.value = '';
                }
            });
            
            // Handle Enter key
            chatInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    const message = chatInput.value;
                    if (message.trim()) {
                        sendMessage(message);
                        chatInput.value = '';
                    }
                }
            });
            
            // Activity suggestion
            activityButton.addEventListener('click', async function() {
                const thinkingDiv = showThinking();
                
                try {
                    const response = await fetch('/api/suggest-activity', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            time_of_day: getCurrentTimeOfDay(),
                            energy_level: 'medium',
                            available_time: 60
                        })
                    });
                    
                    const data = await response.json();
                    
                    chatMessages.removeChild(thinkingDiv);
                    
                    if (data.error) {
                        addMessage('متأسفانه خطایی رخ داد: ' + data.error);
                    } else {
                        addMessage("پیشنهاد فعالیت: " + data.activity + "\n\nدلیل: " + data.reason);
                    }
                    
                } catch (error) {
                    console.error('Error:', error);
                    chatMessages.removeChild(thinkingDiv);
                    addMessage('متأسفانه خطایی رخ داد. لطفاً دوباره تلاش کنید.');
                }
            });
            
            // Daily plan button
            dailyPlanButton.addEventListener('click', async function() {
                const thinkingDiv = showThinking();
                
                try {
                    const today = new Date();
                    const date = today.toISOString().split('T')[0];
                    
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: "لطفاً یک برنامه روزانه کامل برای امروز (" + date + ") به من پیشنهاد دهید که شامل ورزش، تغذیه، کار و استراحت باشد."
                        })
                    });
                    
                    const data = await response.json();
                    
                    chatMessages.removeChild(thinkingDiv);
                    
                    if (data.error) {
                        addMessage('متأسفانه خطایی رخ داد: ' + data.error);
                    } else {
                        addMessage(data.response);
                    }
                    
                } catch (error) {
                    console.error('Error:', error);
                    chatMessages.removeChild(thinkingDiv);
                    addMessage('متأسفانه خطایی رخ داد. لطفاً دوباره تلاش کنید.');
                }
            });
            
            // Schedule analysis button
            scheduleAnalysisButton.addEventListener('click', async function() {
                const thinkingDiv = showThinking();
                
                try {
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: "لطفاً برنامه زمانی و وظایف من را تحلیل کرده و پیشنهادهایی برای بهینه‌سازی مدیریت زمان من ارائه دهید."
                        })
                    });
                    
                    const data = await response.json();
                    
                    chatMessages.removeChild(thinkingDiv);
                    
                    if (data.error) {
                        addMessage('متأسفانه خطایی رخ داد: ' + data.error);
                    } else {
                        addMessage(data.response);
                    }
                    
                } catch (error) {
                    console.error('Error:', error);
                    chatMessages.removeChild(thinkingDiv);
                    addMessage('متأسفانه خطایی رخ داد. لطفاً دوباره تلاش کنید.');
                }
            });
            
            // Voice recognition
            voiceButton.addEventListener('click', function() {
                if (!isRecording) {
                    startRecording();
                } else {
                    stopRecording();
                }
            });
            
            // Get current time of day (morning, afternoon, evening)
            function getCurrentTimeOfDay() {
                const hour = new Date().getHours();
                
                if (hour >= 5 && hour < 12) {
                    return 'morning';
                } else if (hour >= 12 && hour < 18) {
                    return 'afternoon';
                } else {
                    return 'evening';
                }
            }
            
            // Start voice recording
            function startRecording() {
                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                    addMessage('متأسفانه مرورگر شما از ضبط صدا پشتیبانی نمی‌کند.');
                    return;
                }
                
                voiceButton.classList.add('recording');
                voiceButton.textContent = 'در حال ضبط...';
                isRecording = true;
                
                navigator.mediaDevices.getUserMedia({ audio: true })
                    .then(stream => {
                        const mediaRecorder = new MediaRecorder(stream);
                        const audioChunks = [];
                        
                        mediaRecorder.addEventListener('dataavailable', event => {
                            audioChunks.push(event.data);
                        });
                        
                        mediaRecorder.addEventListener('stop', () => {
                            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                            const reader = new FileReader();
                            
                            reader.readAsDataURL(audioBlob);
                            reader.onloadend = function() {
                                const base64data = reader.result.split(',')[1];
                                
                                // Send to speech-to-text API
                                fetch('/api/speech-to-text', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        audio_data: base64data
                                    })
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.text) {
                                        chatInput.value = data.text;
                                        sendMessage(data.text);
                                    } else {
                                        addMessage('متأسفانه صدای شما تشخیص داده نشد. لطفاً دوباره تلاش کنید.');
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    addMessage('متأسفانه خطایی در تبدیل صدا به متن رخ داد.');
                                });
                            };
                            
                            // Clean up
                            stream.getTracks().forEach(track => track.stop());
                        });
                        
                        // Start recording
                        mediaRecorder.start();
                        
                        // Stop recording after 10 seconds automatically
                        setTimeout(() => {
                            if (mediaRecorder.state === 'recording') {
                                mediaRecorder.stop();
                                voiceButton.classList.remove('recording');
                                voiceButton.textContent = 'صدا';
                                isRecording = false;
                            }
                        }, 10000);
                    })
                    .catch(error => {
                        console.error('Error accessing microphone:', error);
                        addMessage('متأسفانه دسترسی به میکروفون امکان‌پذیر نیست.');
                        voiceButton.classList.remove('recording');
                        voiceButton.textContent = 'صدا';
                        isRecording = false;
                    });
            }
            
            // Stop voice recording
            function stopRecording() {
                voiceButton.classList.remove('recording');
                voiceButton.textContent = 'صدا';
                isRecording = false;
                
                // Note: The actual stopping is handled in the MediaRecorder event listeners
            }
        });
    </script>
</body>
</html>'''
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>چت هوشمند | Persian Life Manager</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/Vazirmatn-font-face.css">
    <style>
        :root {{
            --main-bg-color: #121212;
            --card-bg-color: #1e1e1e;
            --sidebar-bg-color: #171717;
            --neon-color: #00ffaa;
            --neon-pink: #ff00aa;
            --neon-blue: #00aaff;
            --neon-glow: 0 0 10px rgba(0, 255, 170, 0.7);
            --text-color: #ecf0f1;
            --border-color: #2d2d2d;
            --input-bg: #1a1a1a;
        }}
        
        body {{
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--main-bg-color);
            color: var(--text-color);
            direction: rtl;
            line-height: 1.6;
        }}
        
        /* Navbar styles */
        .navbar {{
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 60px;
            background-color: rgba(30, 30, 30, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }}
        
        .navbar-container {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
            height: 100%;
            max-width: 1200px;
            margin: 0 auto;
        }}
        
        .navbar-logo {{
            font-size: 20px;
            font-weight: bold;
            color: var(--neon-color);
            text-shadow: var(--neon-glow);
        }}
        
        .navbar-links {{
            display: flex;
        }}
        
        .navbar-link {{
            color: var(--text-color);
            text-decoration: none;
            margin-right: 20px;
            padding: 5px 10px;
            border-radius: 4px;
            transition: all 0.3s ease;
        }}
        
        .navbar-link:hover {{
            color: var(--neon-color);
            background-color: rgba(0, 255, 170, 0.1);
        }}
        
        .navbar-link.active {{
            color: var(--neon-color);
            border-bottom: 2px solid var(--neon-color);
        }}
        
        .navbar-link.logout {{
            color: #ff5555;
        }}
        
        .navbar-link.logout:hover {{
            color: #ff5555;
            background-color: rgba(255, 85, 85, 0.1);
        }}
        
        .content-container {{
            padding: 20px;
            margin-top: 70px;
        }}
        
        .page-title {{
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
            color: var(--neon-color);
            text-shadow: 0 0 5px rgba(0, 255, 170, 0.5);
        }}
        
        .chat-container {{
            display: flex;
            flex-direction: column;
            height: calc(100vh - 140px);
            background-color: var(--card-bg-color);
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
        }}
        
        .chat-messages {{
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }}
        
        .message {{
            max-width: 80%;
            margin-bottom: 15px;
            padding: 12px 16px;
            border-radius: 10px;
            font-size: 16px;
            line-height: 1.5;
            animation: fade-in 0.3s ease-out;
        }}
        
        @keyframes fade-in {{
            from {{ opacity: 0; transform: translateY(10px); }}
            to {{ opacity: 1; transform: translateY(0); }}
        }}
        
        .user-message {{
            align-self: flex-end;
            background-color: rgba(0, 170, 255, 0.2);
            border: 1px solid rgba(0, 170, 255, 0.4);
            border-bottom-right-radius: 0;
            box-shadow: 0 0 10px rgba(0, 170, 255, 0.2);
        }}
        
        .ai-message {{
            align-self: flex-start;
            background-color: rgba(0, 255, 170, 0.1);
            border: 1px solid rgba(0, 255, 170, 0.3);
            border-bottom-left-radius: 0;
            box-shadow: 0 0 10px rgba(0, 255, 170, 0.2);
        }}
        
        .chat-input-container {{
            display: flex;
            padding: 15px;
            background-color: rgba(0, 0, 0, 0.2);
            border-top: 1px solid var(--border-color);
        }}
        
        .chat-input {{
            flex: 1;
            padding: 12px 15px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: var(--input-bg);
            color: var(--text-color);
            font-family: 'Vazirmatn', Arial, sans-serif;
            font-size: 16px;
            transition: border-color 0.3s ease;
            margin-left: 10px;
        }}
        
        .chat-input:focus {{
            outline: none;
            border-color: var(--neon-color);
            box-shadow: 0 0 5px rgba(0, 255, 170, 0.3);
        }}
        
        .send-button {{
            background-color: transparent;
            color: var(--neon-color);
            border: 2px solid var(--neon-color);
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 0 10px rgba(0, 255, 170, 0.3);
            transition: all 0.3s ease;
            font-family: 'Vazirmatn', Arial, sans-serif;
        }}
        
        .send-button:hover {{
            background-color: rgba(0, 255, 170, 0.1);
            box-shadow: 0 0 15px rgba(0, 255, 170, 0.5);
        }}
        
        .voice-button {{
            background-color: transparent;
            color: var(--neon-pink);
            border: 2px solid var(--neon-pink);
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 0 10px rgba(255, 0, 170, 0.3);
            transition: all 0.3s ease;
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin-left: 10px;
        }}
        
        .voice-button:hover {{
            background-color: rgba(255, 0, 170, 0.1);
            box-shadow: 0 0 15px rgba(255, 0, 170, 0.5);
        }}
        
        .voice-button.recording {{
            background-color: rgba(255, 0, 170, 0.2);
            animation: pulse 1.5s infinite;
        }}
        
        @keyframes pulse {{
            0% {{ box-shadow: 0 0 10px rgba(255, 0, 170, 0.5); }}
            50% {{ box-shadow: 0 0 20px rgba(255, 0, 170, 0.8); }}
            100% {{ box-shadow: 0 0 10px rgba(255, 0, 170, 0.5); }}
        }}
        
        .tools-container {{
            margin-bottom: 20px;
        }}
        
        .tool-button {{
            background-color: transparent;
            color: var(--neon-blue);
            border: 2px solid var(--neon-blue);
            border-radius: 5px;
            padding: 8px 15px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 0 5px rgba(0, 170, 255, 0.3);
            transition: all 0.3s ease;
            font-family: 'Vazirmatn', Arial, sans-serif;
            margin-left: 10px;
            margin-bottom: 10px;
        }}
        
        .tool-button:hover {{
            background-color: rgba(0, 170, 255, 0.1);
            box-shadow: 0 0 10px rgba(0, 170, 255, 0.5);
        }}
        
        .loading {{
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0, 255, 170, 0.3);
            border-radius: 50%;
            border-top-color: var(--neon-color);
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }}
        
        @keyframes spin {{
            to {{ transform: rotate(360deg); }}
        }}
        
        .thinking {{
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            color: rgba(255, 255, 255, 0.7);
            align-self: flex-start;
        }}
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="navbar-container">
            <div class="navbar-logo">Persian Life Manager</div>
            <div class="navbar-links">
                <a href="/dashboard" class="navbar-link">داشبورد</a>
                <a href="/finance" class="navbar-link">مالی</a>
                <a href="/health" class="navbar-link">سلامت</a>
                <a href="/calendar" class="navbar-link">تقویم</a>
                <a href="/ai-chat" class="navbar-link active">چت هوشمند</a>
                <a href="/logout" class="navbar-link logout">خروج</a>
            </div>
        </div>
    </nav>
    
    <div class="content-container">
        <div class="page-title">چت هوشمند Persian Life Manager</div>
        
        <div class="tools-container">
            <button class="tool-button" id="activity-suggestion">پیشنهاد فعالیت</button>
            <button class="tool-button" id="daily-plan">برنامه روزانه</button>
            <button class="tool-button" id="schedule-analysis">تحلیل برنامه</button>
        </div>
        
        <div class="chat-container">
            <div class="chat-messages" id="chat-messages">
                <div class="message ai-message" id="welcome-message">
                    <!-- سلام پیام در JavaScript اضافه می‌شود -->
                </div>
            </div>
            
            <div class="chat-input-container">
                <button class="voice-button" id="voice-button">
                    <i class="fas fa-microphone"></i> صدا
                </button>
                <input type="text" class="chat-input" id="chat-input" placeholder="پیام خود را بنویسید...">
                <button class="send-button" id="send-button">ارسال</button>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {{
            const chatMessages = document.getElementById('chat-messages');
            const chatInput = document.getElementById('chat-input');
            const sendButton = document.getElementById('send-button');
            const voiceButton = document.getElementById('voice-button');
            const activityButton = document.getElementById('activity-suggestion');
            const dailyPlanButton = document.getElementById('daily-plan');
            const scheduleAnalysisButton = document.getElementById('schedule-analysis');
            
            let isRecording = false;
            let chatHistory = [];
            
            // Function to add a message to the chat
            function addMessage(content, isUser = false) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                messageDiv.classList.add(isUser ? 'user-message' : 'ai-message');
                messageDiv.textContent = content;
                
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                return messageDiv;
            }
            
            // Function to show thinking indicator
            function showThinking() {
                const thinkingDiv = document.createElement('div');
                thinkingDiv.classList.add('thinking');
                
                const loadingSpinner = document.createElement('div');
                loadingSpinner.classList.add('loading');
                thinkingDiv.appendChild(loadingSpinner);
                
                const thinkingText = document.createTextNode('در حال فکر کردن...');
                thinkingDiv.appendChild(thinkingText);
                
                chatMessages.appendChild(thinkingDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                return thinkingDiv;
            }
            
            // Send message to the AI
            async function sendMessage(message) {
                if (!message.trim()) return;
                
                // Add user message to chat
                addMessage(message, true);
                
                // Show thinking indicator
                const thinkingDiv = showThinking();
                
                try {
                    // Send to API
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: message,
                            history: chatHistory
                        })
                    });
                    
                    const data = await response.json();
                    
                    // Remove thinking indicator
                    chatMessages.removeChild(thinkingDiv);
                    
                    // Add AI response to chat
                    if (data.error) {
                        addMessage('متأسفانه خطایی رخ داد: ' + data.error);
                    } else {
                        addMessage(data.response);
                        
                        // Update chat history
                        chatHistory.push({
                            role: 'user',
                            content: message
                        });
                        
                        chatHistory.push({
                            role: 'assistant',
                            content: data.response
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    chatMessages.removeChild(thinkingDiv);
                    addMessage('متأسفانه خطایی رخ داد. لطفاً دوباره تلاش کنید.');
                }
            }
            
            // Handle send button click
            sendButton.addEventListener('click', function() {
                const message = chatInput.value;
                if (message.trim()) {
                    sendMessage(message);
                    chatInput.value = '';
                }
            });
            
            // Handle Enter key
            chatInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    const message = chatInput.value;
                    if (message.trim()) {
                        sendMessage(message);
                        chatInput.value = '';
                    }
                }
            });
            
            // Activity suggestion
            activityButton.addEventListener('click', async function() {
                const thinkingDiv = showThinking();
                
                try {
                    const response = await fetch('/api/suggest-activity', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            time_of_day: getCurrentTimeOfDay(),
                            energy_level: 'medium',
                            available_time: 60
                        })
                    });
                    
                    const data = await response.json();
                    
                    chatMessages.removeChild(thinkingDiv);
                    
                    if (data.error) {
                        addMessage('متأسفانه خطایی رخ داد: ' + data.error);
                    } else {
                        addMessage(`پیشنهاد فعالیت: ${data.activity}\n\nدلیل: ${data.reason}`);
                    }
                    
                } catch (error) {
                    console.error('Error:', error);
                    chatMessages.removeChild(thinkingDiv);
                    addMessage('متأسفانه خطایی رخ داد. لطفاً دوباره تلاش کنید.');
                }
            });
            
            // Daily plan button
            dailyPlanButton.addEventListener('click', async function() {
                const thinkingDiv = showThinking();
                
                try {
                    const today = new Date();
                    const date = today.toISOString().split('T')[0];
                    
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: `لطفاً یک برنامه روزانه کامل برای امروز (${date}) به من پیشنهاد دهید که شامل ورزش، تغذیه، کار و استراحت باشد.`
                        })
                    });
                    
                    const data = await response.json();
                    
                    chatMessages.removeChild(thinkingDiv);
                    
                    if (data.error) {
                        addMessage('متأسفانه خطایی رخ داد: ' + data.error);
                    } else {
                        addMessage(data.response);
                    }
                    
                } catch (error) {
                    console.error('Error:', error);
                    chatMessages.removeChild(thinkingDiv);
                    addMessage('متأسفانه خطایی رخ داد. لطفاً دوباره تلاش کنید.');
                }
            });
            
            // Schedule analysis button
            scheduleAnalysisButton.addEventListener('click', async function() {
                const thinkingDiv = showThinking();
                
                try {
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: "لطفاً برنامه زمانی و وظایف من را تحلیل کرده و پیشنهادهایی برای بهینه‌سازی مدیریت زمان من ارائه دهید."
                        })
                    });
                    
                    const data = await response.json();
                    
                    chatMessages.removeChild(thinkingDiv);
                    
                    if (data.error) {
                        addMessage('متأسفانه خطایی رخ داد: ' + data.error);
                    } else {
                        addMessage(data.response);
                    }
                    
                } catch (error) {
                    console.error('Error:', error);
                    chatMessages.removeChild(thinkingDiv);
                    addMessage('متأسفانه خطایی رخ داد. لطفاً دوباره تلاش کنید.');
                }
            });
            
            // Voice recognition
            voiceButton.addEventListener('click', function() {
                if (!isRecording) {
                    startRecording();
                } else {
                    stopRecording();
                }
            });
            
            // Get current time of day (morning, afternoon, evening)
            function getCurrentTimeOfDay() {
                const hour = new Date().getHours();
                
                if (hour >= 5 && hour < 12) {
                    return 'morning';
                } else if (hour >= 12 && hour < 18) {
                    return 'afternoon';
                } else {
                    return 'evening';
                }
            }
            
            // Start voice recording
            function startRecording() {
                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                    addMessage('متأسفانه مرورگر شما از ضبط صدا پشتیبانی نمی‌کند.');
                    return;
                }
                
                voiceButton.classList.add('recording');
                voiceButton.textContent = 'در حال ضبط...';
                isRecording = true;
                
                navigator.mediaDevices.getUserMedia({ audio: true })
                    .then(stream => {
                        const mediaRecorder = new MediaRecorder(stream);
                        const audioChunks = [];
                        
                        mediaRecorder.addEventListener('dataavailable', event => {
                            audioChunks.push(event.data);
                        });
                        
                        mediaRecorder.addEventListener('stop', () => {
                            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                            const reader = new FileReader();
                            
                            reader.readAsDataURL(audioBlob);
                            reader.onloadend = function() {
                                const base64data = reader.result.split(',')[1];
                                
                                // Send to speech-to-text API
                                fetch('/api/speech-to-text', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        audio_data: base64data
                                    })
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.text) {
                                        chatInput.value = data.text;
                                        sendMessage(data.text);
                                    } else {
                                        addMessage('متأسفانه صدای شما تشخیص داده نشد. لطفاً دوباره تلاش کنید.');
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    addMessage('متأسفانه خطایی در تبدیل صدا به متن رخ داد.');
                                });
                            };
                            
                            // Clean up
                            stream.getTracks().forEach(track => track.stop());
                        });
                        
                        // Start recording
                        mediaRecorder.start();
                        
                        // Stop recording after 10 seconds automatically
                        setTimeout(() => {
                            if (mediaRecorder.state === 'recording') {
                                mediaRecorder.stop();
                                voiceButton.classList.remove('recording');
                                voiceButton.textContent = 'صدا';
                                isRecording = false;
                            }
                        }, 10000);
                    })
                    .catch(error => {
                        console.error('Error accessing microphone:', error);
                        addMessage('متأسفانه دسترسی به میکروفون امکان‌پذیر نیست.');
                        voiceButton.classList.remove('recording');
                        voiceButton.textContent = 'صدا';
                        isRecording = false;
                    });
            }
            
            // Stop voice recording
            function stopRecording() {
                voiceButton.classList.remove('recording');
                voiceButton.textContent = 'صدا';
                isRecording = false;
                
                // Note: The actual stopping is handled in the MediaRecorder event listeners
            }
        });
    </script>
</body>
</html>
'''
            self.wfile.write(html_content.encode('utf-8'))
        
        def handle_api_chat(self):
            """Handle GET request to chat API"""
            self.send_json_response({"error": "This endpoint only accepts POST requests"})
        
        def handle_api_suggest_activity(self):
            """Handle GET request to suggest activity API"""
            self.send_json_response({"error": "This endpoint only accepts POST requests"})
        
        def handle_api_speech_to_text(self):
            """Handle GET request to speech-to-text API"""
            self.send_json_response({"error": "This endpoint only accepts POST requests"})
        
        def handle_api_chat_post(self, json_data):
            """Process chat API POST request"""
            global ai_chat_service
            
            if ai_chat_service is None:
                self.send_json_response({"error": "AI Chat Service is not available"})
                return
                
            message = json_data.get('message', '')
            history = json_data.get('history', [])
            
            if not message:
                self.send_json_response({"error": "Message is required"})
                return
            
            try:
                # Get user data for context
                user_data = None
                if current_user["user_id"]:
                    finance_service = FinanceService(current_user["user_id"])
                    health_service = HealthService(current_user["user_id"])
                    calendar_service = CalendarService(current_user["user_id"])
                    
                    user_data = {
                        "username": current_user["username"],
                        "finances": {
                            "transactions": finance_service.get_transactions(limit=10)
                        },
                        "health": {
                            "metrics": health_service.get_metrics(limit=5),
                            "exercises": health_service.get_exercises(limit=5)
                        },
                        "calendar": {
                            "events": calendar_service.get_upcoming_events(limit=5),
                            "tasks": calendar_service.get_pending_tasks(limit=5)
                        }
                    }
                
                # Generate response
                response = ai_chat_service.chat(message, user_data, history)
                self.send_json_response({"response": response})
                
            except Exception as e:
                logger.error(f"Error in handle_api_chat_post: {str(e)}")
                self.send_json_response({"error": "Failed to process chat message", "details": str(e)})
        
        def handle_api_suggest_activity_post(self, json_data):
            """Process suggest activity API POST request"""
            global ai_chat_service
            
            if ai_chat_service is None:
                self.send_json_response({"error": "AI Chat Service is not available"})
                return
                
            time_of_day = json_data.get('time_of_day', 'afternoon')
            energy_level = json_data.get('energy_level', 'medium')
            available_time = json_data.get('available_time', 60)
            
            try:
                # Get user data for context
                user_data = None
                if current_user["user_id"]:
                    health_service = HealthService(current_user["user_id"])
                    calendar_service = CalendarService(current_user["user_id"])
                    
                    user_data = {
                        "username": current_user["username"],
                        "health": {
                            "metrics": health_service.get_metrics(limit=5),
                            "exercises": health_service.get_exercises(limit=5)
                        },
                        "calendar": {
                            "events": calendar_service.get_upcoming_events(limit=5),
                            "tasks": calendar_service.get_pending_tasks(limit=5)
                        }
                    }
                
                # Generate suggestion
                suggestion = ai_chat_service.suggest_activity(time_of_day, energy_level, available_time, user_data)
                self.send_json_response(suggestion)
                
            except Exception as e:
                logger.error(f"Error in handle_api_suggest_activity_post: {str(e)}")
                self.send_json_response({"error": "Failed to suggest activity", "details": str(e)})
        
        def handle_api_speech_to_text_post(self, json_data):
            """Process speech-to-text API POST request"""
            global speech_service
            
            if speech_service is None:
                self.send_json_response({"error": "Speech-to-Text Service is not available"})
                return
                
            audio_data = json_data.get('audio_data', '')
            
            if not audio_data:
                self.send_json_response({"error": "Audio data is required"})
                return
            
            try:
                # Transcribe audio
                text = speech_service.transcribe_audio(audio_data)
                self.send_json_response({"text": text})
                
            except Exception as e:
                logger.error(f"Error in handle_api_speech_to_text_post: {str(e)}")
                self.send_json_response({"error": "Failed to transcribe audio", "details": str(e)})
    
    # Start HTTP server on port 5000
    PORT = 5000
    handler = PersianLifeManagerHandler
    
    logger.info(f"Starting Persian Life Manager web preview on port {PORT}")
    
    with socketserver.TCPServer(("0.0.0.0", PORT), handler) as httpd:
        logger.info(f"Server started successfully on port {PORT}")
        logger.info("Visit the web preview to see Persian Life Manager")
        httpd.serve_forever()


def main():
    """Main application entry point"""
    logger.info("Starting Persian Life Manager...")
    
    if IN_REPLIT:
        logger.info("Running in Replit environment - starting web preview")
        run_replit_web_preview()
    else:
        logger.info("Running in desktop environment - starting Qt application")
        run_desktop_app()

if __name__ == "__main__":
    main()
